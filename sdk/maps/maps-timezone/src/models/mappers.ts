/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const TimezoneByIdResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneByIdResult",
    modelProperties: {
      version: {
        serializedName: "Version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      referenceUtcTimestamp: {
        serializedName: "ReferenceUtcTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeZones: {
        serializedName: "TimeZones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimezoneById"
            }
          }
        }
      }
    }
  }
};

export const TimezoneById: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneById",
    modelProperties: {
      id: {
        serializedName: "Id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliases: {
        serializedName: "Aliases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      countries: {
        serializedName: "Countries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CountryRecord"
            }
          }
        }
      },
      names: {
        serializedName: "Names",
        type: {
          name: "Composite",
          className: "TimezoneNames"
        }
      },
      referenceTime: {
        serializedName: "ReferenceTime",
        type: {
          name: "Composite",
          className: "ReferenceTimeById"
        }
      },
      representativePoint: {
        serializedName: "RepresentativePoint",
        type: {
          name: "Composite",
          className: "RepresentativePoint"
        }
      },
      timeTransitions: {
        serializedName: "TimeTransitions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeTransition"
            }
          }
        }
      }
    }
  }
};

export const CountryRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CountryRecord",
    modelProperties: {
      name: {
        serializedName: "Name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "Code",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimezoneNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneNames",
    modelProperties: {
      iSO6391LanguageCode: {
        serializedName: "ISO6391LanguageCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      generic: {
        serializedName: "Generic",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standard: {
        serializedName: "Standard",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      daylight: {
        serializedName: "Daylight",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceTimeById: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceTimeById",
    modelProperties: {
      tag: {
        serializedName: "Tag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standardOffset: {
        serializedName: "StandardOffset",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      daylightSavings: {
        serializedName: "DaylightSavings",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      wallTime: {
        serializedName: "WallTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      posixTzValidYear: {
        serializedName: "PosixTzValidYear",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      posixTz: {
        serializedName: "PosixTz",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RepresentativePoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RepresentativePoint",
    modelProperties: {
      latitude: {
        serializedName: "Latitude",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      longitude: {
        serializedName: "Longitude",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TimeTransition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeTransition",
    modelProperties: {
      tag: {
        serializedName: "Tag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standardOffset: {
        serializedName: "StandardOffset",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      daylightSavings: {
        serializedName: "DaylightSavings",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      utcStart: {
        serializedName: "UtcStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      utcEnd: {
        serializedName: "UtcEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const TimezoneByCoordinatesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneByCoordinatesResult",
    modelProperties: {
      version: {
        serializedName: "Version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      referenceUtcTimestamp: {
        serializedName: "ReferenceUtcTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeZones: {
        serializedName: "TimeZones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeZoneByCoordinates"
            }
          }
        }
      }
    }
  }
};

export const TimeZoneByCoordinates: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeZoneByCoordinates",
    modelProperties: {
      id: {
        serializedName: "Id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliases: {
        serializedName: "Aliases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      countries: {
        serializedName: "Countries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CountryRecord"
            }
          }
        }
      },
      names: {
        serializedName: "Names",
        type: {
          name: "Composite",
          className: "TimezoneNames"
        }
      },
      referenceTime: {
        serializedName: "ReferenceTime",
        type: {
          name: "Composite",
          className: "ReferenceTimeByCoordinates"
        }
      },
      representativePoint: {
        serializedName: "RepresentativePoint",
        type: {
          name: "Composite",
          className: "RepresentativePoint"
        }
      },
      timeTransitions: {
        serializedName: "TimeTransitions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeTransition"
            }
          }
        }
      }
    }
  }
};

export const ReferenceTimeByCoordinates: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceTimeByCoordinates",
    modelProperties: {
      tag: {
        serializedName: "Tag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standardOffset: {
        serializedName: "StandardOffset",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      daylightSavings: {
        serializedName: "DaylightSavings",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      wallTime: {
        serializedName: "WallTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      posixTzValidYear: {
        serializedName: "PosixTzValidYear",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      posixTz: {
        serializedName: "PosixTz",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sunrise: {
        serializedName: "Sunrise",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sunset: {
        serializedName: "Sunset",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimezoneEnumWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneEnumWindow",
    modelProperties: {
      windowsId: {
        serializedName: "WindowsId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      territory: {
        serializedName: "Territory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ianaIds: {
        serializedName: "IanaIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IanaId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IanaId",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAlias: {
        serializedName: "isAlias",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      aliasOf: {
        serializedName: "aliasOf",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hasZone1970Location: {
        serializedName: "hasZone1970Location",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TimezoneIanaVersionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimezoneIanaVersionResult",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
