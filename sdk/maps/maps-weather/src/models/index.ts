/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface HourlyForecastResponse {
  /** Forecast data for each returned hour. */
  forecasts?: HourlyForecast[];
}

export interface HourlyForecast {
  /** Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  date?: string;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Phrase description of the weather icon. */
  iconPhrase?: string;
  /** Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. */
  hasPrecipitation?: boolean;
  /** Specifies whether or not it is daylight. True indicates day light. */
  isDaylight?: boolean;
  /** Temperature being returned. */
  temperature?: WeatherUnit;
  /** RealFeelâ„¢ Temperature being returned. Describes what the temperature really feels like in the shade. */
  realFeelTemperature?: WeatherUnit;
  /** The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation. */
  wetBulbTemperature?: WeatherUnit;
  /** The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. */
  dewPoint?: WeatherUnit;
  /** Wind details being returned including speed and direction. */
  wind?: WindDetails;
  /** Wind gust. Wind gust is a sudden, brief increase in speed of the wind. */
  windGust?: WindDetails;
  /** Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. */
  relativeHumidity?: number;
  /** Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. */
  visibility?: WeatherUnit;
  /** Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds. */
  ceiling?: WeatherUnit;
  /**
   * Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
   *   * `0-2` - Low danger from the sun's UV rays or the average person.
   *   * `3-5` - Moderate risk of harm from unprotected sun exposure.
   *   * `6-7` - High risk of harm from unprotected sun exposure.
   *   * `8-10` - Very high risk of harm from unprotected sun exposure.
   *   * `11+` - Extreme risk of harm from unprotected sun exposure.
   */
  uvIndex?: number;
  /** Phrase associated with the `uvIndex`. */
  uvIndexPhrase?: string;
  /** Percent representing the probability of precipitation. For example, '20'. */
  precipitationProbability?: number;
  /** Percent representing the probability of rain. For example, '50'. */
  rainProbability?: number;
  /** Percent representing the probability of snow. For example, '50'. */
  snowProbability?: number;
  /** Percent representing the probability of snow. For example, '5'. */
  iceProbability?: number;
  /** Total liquid equivalent of precipitation during the forecast period. */
  totalLiquid?: WeatherUnit;
  /** Rain */
  rain?: WeatherUnit;
  /** Snow */
  snow?: WeatherUnit;
  /** Ice */
  ice?: WeatherUnit;
  /** Percent representing cloud cover. */
  cloudCover?: number;
}

/** Specific value of a given unit related to weather. */
export interface WeatherUnit {
  /** Rounded value. */
  value?: number;
  /** Type of unit for the returned value. */
  unit?: string;
  /** Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  unitType?: number;
}

/** Wind details being returned including speed and direction. */
export interface WindDetails {
  /** Wind direction */
  direction?: WindDirection;
  /** Speed of the wind in specified unit. */
  speed?: WindSpeed;
}

/** Wind direction */
export interface WindDirection {
  /** Wind direction in Azimuth degrees,  starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359. */
  degrees?: number;
  /** Direction abbreviation in the specified language. */
  localizedDescription?: string;
}

/** Speed of wind in specified unit. */
export interface WindSpeed {
  /** Rounded value of the speed. */
  value?: number;
  /** Type of unit for the speed value. */
  unit?: string;
  /** Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  unitType?: number;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

export interface MinuteForecastResponse {
  /** Phrase summaries for the entire forecast period. */
  summary?: MinuteForecastSummary;
  /** Summary information for each interval in the forecast. The Summaries breaks down each potential interval where precipitation starts and stops. */
  intervalSummaries?: IntervalSummary[];
  /** Forecast data for each interval in the forecast. */
  intervals?: ForecastInterval[];
}

/** Phrase summaries for the entire forecast period. */
export interface MinuteForecastSummary {
  /** Summary phrase for the next 60 minutes. Phrase length is approximately 60 characters. */
  briefPhrase60?: string;
  /** Short summary phrase for the next 120 minutes. Phrase length is approximately 25 characters. */
  shortPhrase?: string;
  /** Summary phrase for the next 120 minutes. Phrase length is approximately 60 characters. */
  briefPhrase?: string;
  /** Long summary phrase for the next 120 minutes. Phrase length is 60+ characters. */
  longPhrase?: string;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
}

export interface IntervalSummary {
  /** The first minute to which the summary applies. */
  startMinute?: number;
  /** The last minute to which the summary applies. */
  endMinute?: number;
  /** The number of minutes for which the summary applies. */
  totalMinutes?: number;
  /** Short summary phrase. Phrase length is approximately 25 characters. */
  shortPhrase?: string;
  /** Brief summary phrase. Phrase length is approximately 60 characters. */
  briefPhrase?: string;
  /** Long summary phrase. Phrase length is 60+ characters. */
  longPhrase?: string;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
}

export interface ForecastInterval {
  /** The date and time for the start of the interval in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  startTime?: string;
  /** The first minute for the interval. */
  minute?: number;
  /** A unit that represents forecasted precipitation intensity. */
  dbz?: number;
  /** A short phrase describing precipitation condition for the interval. */
  shortPhrase?: string;
  /** Key that specifies the threshold value. Along with precipitationType, can be used to determine the simplifiedColor. If dbz is zero, not present in the response. */
  threshold?: string;
  /** The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero, color is not present in the response. */
  color?: ColorValue;
  /** The band color that maps to the precipitation type and threshold. If dbz is zero, not present in the response. */
  simplifiedColor?: ColorValue;
  /** Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz is zero, precipitationType is not present in the response. */
  precipitationType?: string;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Percent representing cloud cover. */
  cloudCover?: number;
}

export interface ColorValue {
  /** Red component of the RGB value. */
  red?: number;
  /** Green component of the RGB value. */
  green?: number;
  /** Blue component of the RGB value */
  blue?: number;
  /** Hexadecimal color value. */
  hex?: string;
}

export interface QuarterDayForecastResponse {
  /** Forecast data for each quarter in the response. */
  forecasts?: QuarterDayForecast[];
}

export interface QuarterDayForecast {
  /** Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  date?: string;
  /** Date and time of the beginning of the forecast quarter displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  effectiveDate?: string;
  /** Quarter of the day. */
  quarter?: DayQuarter;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Phrase description of the icon. Displayed in specified language. For example, 'Sunny'. */
  iconPhrase?: string;
  /** Short summary phrase summary for quarter. */
  phrase?: string;
  /** Temperature values for the quarter. */
  temperature?: WeatherUnitRange;
  /** RealFeelâ„¢ Temperature values for the quarter. */
  realFeelTemperature?: WeatherUnitRange;
  /** The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. */
  dewPoint?: WeatherUnit;
  /** Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. */
  relativeHumidity?: number;
  /** Wind details being returned including speed and direction. */
  wind?: WindDetails;
  /** Wind gust. Wind gust is a sudden, brief increase in speed of the wind. */
  windGust?: WindDetails;
  /** Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. */
  visibility?: WeatherUnit;
  /** Percent representing cloud cover. */
  cloudCover?: number;
  /** Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. */
  hasPrecipitation?: boolean;
  /** Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is not present in the response. */
  precipitationType?: string;
  /** Description of the intensity. */
  precipitationIntensity?: string;
  /** Percent representing the probability of precipitation. For example, '20'. */
  precipitationProbability?: number;
  /** Percent representing the probability of a thunderstorm. For example, '10'. */
  thunderstormProbability?: number;
  /** Total liquid equivalent of precipitation during the forecast period. */
  totalLiquid?: WeatherUnit;
  /** Rain */
  rain?: WeatherUnit;
  /** Snow */
  snow?: WeatherUnit;
  /** Ice */
  ice?: WeatherUnit;
}

/** Returned temperature values. */
export interface WeatherUnitRange {
  /** Minimum temperature for the time period. */
  minimum?: WeatherUnit;
  /** Maximum temperature for the time period */
  maximum?: WeatherUnit;
}

export interface CurrentConditionsResponse {
  /** Detailed current weather conditions. */
  results?: CurrentConditions[];
}

export interface CurrentConditions {
  /** Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  dateTime?: string;
  /** Phrase description of the current weather condition.  Displayed in specified language. */
  phrase?: string;
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. */
  hasPrecipitation?: boolean;
  /** Indicates the time of the day. True indicates 'day',', false indicates 'night. */
  isDayTime?: boolean;
  /** Temperature being returned. */
  temperature?: WeatherUnit;
  /** RealFeelâ„¢ Temperature being returned. */
  realFeelTemperature?: WeatherUnit;
  /** RealFeelâ„¢ Temperature being returned. Describes what the temperature really feels like in the shade. */
  realFeelTemperatureShade?: WeatherUnit;
  /** Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. */
  relativeHumidity?: number;
  /** The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. */
  dewPoint?: WeatherUnit;
  /** Wind details being returned including speed and direction. */
  wind?: WindDetails;
  /** Wind gust. Wind gust is a sudden, brief increase in speed of the wind. */
  windGust?: WindDetails;
  /**
   * Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
   *   * `0-2` - Low danger from the sun's UV rays or the average person.
   *   * `3-5` - Moderate risk of harm from unprotected sun exposure.
   *   * `6-7` - High risk of harm from unprotected sun exposure.
   *   * `8-10` - Very high risk of harm from unprotected sun exposure.
   *   * `11+` - Extreme risk of harm from unprotected sun exposure.
   */
  uvIndex?: number;
  /** Phrase associated with the `uvIndex`. */
  uvIndexPhrase?: string;
  /** Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. */
  visibility?: WeatherUnit;
  /** Cause of limited visibility. */
  obstructionsToVisibility?: string;
  /** Percent representing cloud cover. */
  cloudCover?: number;
  /** Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds. */
  ceiling?: WeatherUnit;
  /** Atmospheric pressure in specified unit. */
  pressure?: WeatherUnit;
  /** Atmospheric pressure change. */
  pressureTendency?: PressureTendency;
  /** Departure from the temperature observed 24 hours ago in specified unit. */
  past24HourTemperatureDeparture?: WeatherUnit;
  /** Perceived outdoor temperature caused by the combination of air temperature, relative humidity, and wind speed in specified unit. */
  apparentTemperature?: WeatherUnit;
  /** Perceived air temperature on exposed skin due to wind. */
  windChillTemperature?: WeatherUnit;
  /** The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation. */
  wetBulbTemperature?: WeatherUnit;
  /** Summary of precipitation amounts over the past 24 hours. */
  precipitationSummary?: PrecipitationSummary;
  /** Summary of temperature fluctuations over the past 6, 12, and 24 hours. */
  temperatureSummary?: TemperatureSummary;
}

export interface PressureTendency {
  /** Description of the pressure tendency in specified language */
  localizedDescription?: string;
  /** Pressure tendency code regardless of language. One of F=Falling, S=Steady, R=Rising. */
  code?: string;
}

export interface PrecipitationSummary {
  /** The amount of precipitation (liquid equivalent) that has fallen in the past hour. */
  pastHour?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past three hours. */
  past3Hours?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past six hours. Contains Metric and Imperial Values. */
  past6Hours?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past nine hours. */
  past9Hours?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past 12 hours. */
  past12Hours?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past 18 hours. */
  past18Hours?: WeatherUnit;
  /** The amount of precipitation (liquid equivalent) that has fallen in the past 24 hours. */
  past24Hours?: WeatherUnit;
}

export interface TemperatureSummary {
  /** Summary of temperature fluctuations over the past 6 hours. */
  past6Hours?: TemperatureSummaryPast6Hours;
  /** Summary of temperature fluctuations over the past 12 hours. */
  past12Hours?: TemperatureSummaryPast12Hours;
  /** Summary of temperature fluctuations over the past 24 hours. */
  past24Hours?: TemperatureSummaryPast24Hours;
}

/** Summary of temperature fluctuations over the past 6 hours. */
export interface TemperatureSummaryPast6Hours {
  /** minimum */
  minimum?: WeatherUnit;
  /** maximum */
  maximum?: WeatherUnit;
}

/** Summary of temperature fluctuations over the past 12 hours. */
export interface TemperatureSummaryPast12Hours {
  /** minimum */
  minimum?: WeatherUnit;
  /** maximum */
  maximum?: WeatherUnit;
}

/** Summary of temperature fluctuations over the past 24 hours. */
export interface TemperatureSummaryPast24Hours {
  /** minimum */
  minimum?: WeatherUnit;
  /** maximum */
  maximum?: WeatherUnit;
}

export interface DailyForecastResponse {
  /** Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period. */
  summary?: DailyForecastSummary;
  /** Forecast data for each requested day. */
  forecasts?: DailyForecast[];
}

/** Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period. */
export interface DailyForecastSummary {
  /** Date and time that the summary is in effect, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  startDate?: string;
  /** Date and time that the summary period ends, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  endDate?: string;
  /** severity */
  severity?: number;
  /** Summary phrase of the daily forecast.  Displayed in specified language. */
  phrase?: string;
  /** one or 2 word(s) to summarize the phrase. */
  category?: string;
}

export interface DailyForecast {
  /** Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  date?: string;
  /** Temperature values for the day. */
  temperature?: WeatherUnitRange;
  /** RealFeelâ„¢ Temperature being returned. */
  realFeelTemperature?: WeatherUnitRange;
  /** RealFeelâ„¢ Temperature being returned. Describes what the temperature really feels like in the shade. */
  realFeelTemperatureShade?: WeatherUnitRange;
  /** Hours of sun. */
  hoursOfSun?: number;
  /** Summary of Heating Degree Day or Cooling Degree Day information */
  degreeDaySummary?: DegreeDaySummary;
  /** airAndPollen */
  airAndPollen?: AirAndPollen[];
  /** Day */
  day?: DayOrNight;
  /** Night */
  night?: DayOrNight;
  /** Source(s) of the forecast data. */
  sources?: string[];
}

export interface DegreeDaySummary {
  /** Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C. */
  heating?: WeatherUnit;
  /** Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C. */
  cooling?: WeatherUnit;
}

export interface AirAndPollen {
  /** Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree and UV index. */
  name?: string;
  /** Value of the given type above. Values associated with mold, grass, weed and tree are in units of parts per cubic meter. Both air quality and UV are indices, so they are unitless. */
  value?: number;
  /** Category of the air quality or pollution type. For example, low, high, good, moderate, unhealthy, hazardous. */
  category?: string;
  /** Value associated with the air quality or pollution category. These values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions. */
  categoryValue?: number;
  /** Only exists for air quality. Examples include ozone and particle pollution. */
  type?: string;
}

export interface DayOrNight {
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Phrase description of the icon. Displayed in specified language. For example, 'Sunny'. */
  iconPhrase?: string;
  /** Local weather data provider information. */
  localSource?: LocalSource;
  /** Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. */
  hasPrecipitation?: boolean;
  /** Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is not present in the response. */
  precipitationType?: string;
  /** Description of the intensity. */
  precipitationIntensity?: string;
  /** Phrase description of the forecast in specified language. Azure Maps attempts to keep this phrase under 30 characters in length, but some languages/weather events may result in a longer phrase length, exceeding 30 characters. */
  shortPhrase?: string;
  /** Phrase description of the forecast in specified language. Azure Maps attempts to keep this phrase under 100 characters in length, but some languages/weather events may result in a longer phrase length, exceeding 100 characters. */
  longPhrase?: string;
  /** Percent representing the probability of precipitation. For example, '20'. */
  precipitationProbability?: number;
  /** Percent representing the probability of a thunderstorm. For example, '80'. */
  thunderstormProbability?: number;
  /** Percent representing the probability of rain. For example, '40'. */
  rainProbability?: number;
  /** Percent representing the probability of snow. For example, '30'. */
  snowProbability?: number;
  /** Percent representing the probability of ice. For example, '30'. */
  iceProbability?: number;
  /** Wind details being returned including speed and direction. */
  wind?: WindDetails;
  /** Wind gust. Wind gust is a sudden, brief increase in speed of the wind. */
  windGust?: WindDetails;
  /** Total liquid equivalent of precipitation during the forecast period. */
  totalLiquid?: WeatherUnit;
  /** Rain */
  rain?: WeatherUnit;
  /** Snow */
  snow?: WeatherUnit;
  /** Ice */
  ice?: WeatherUnit;
  /** Hours of precipitation */
  hoursOfPrecipitation?: number;
  /** Hours of rain. */
  hoursOfRain?: number;
  /** Hours of snow. */
  hoursOfSnow?: number;
  /** Hours of ice. */
  hoursOfIce?: number;
  /** Percent representing cloud cover. */
  cloudCover?: number;
}

/** Local weather data provider information. */
export interface LocalSource {
  /** Numeric identifier, unique to the local data provider. */
  id?: number;
  /** Name of the local data provider. Name is displayed in the language specified by language code in URL, if available. Otherwise, Name is displayed in English or the language in which the name was provided. */
  name?: string;
  /** Weather code provided by the local data provider. This weather code allows the forecast to be matched to icons provided by the local data provider instead of Azure Maps icons. */
  weatherCode?: string;
}

/** This object is returned from a successful Weather Along Route. */
export interface WeatherAlongRouteResponse {
  /** Short summary of the weather along the route. */
  summary?: WeatherAlongRouteSummary;
  /** Data for each waypoint returned in the same order as specified in the request. */
  waypoints?: WeatherWaypoint[];
}

/** Short summary of the weather along the route. */
export interface WeatherAlongRouteSummary {
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** Description of the weather hazard affecting the trip. */
  hazards?: WeatherHazards;
}

/** Description of the weather hazard affecting the trip. */
export interface WeatherHazards {
  /**
   * A severity/hazard index.
   *   * `0` - No hazard.
   *   * `1` - Be informed, be aware.
   *   * `2` - Pay attention, be prepared.
   *   * `3` - Take action.
   *   * `4` - Life threatening, emergency.
   */
  maxHazardIndex?: number;
  /** Details of the weather hazards affecting the trip. */
  hazardDetails?: HazardDetail[];
}

export interface HazardDetail {
  /**
   * A severity/hazard index.
   *   * `0` - No hazard.
   *   * `1` - Be informed, be aware.
   *   * `2` - Pay attention, be prepared.
   *   * `3` - Take action.
   *   * `4` - Life threatening, emergency.
   */
  hazardIndex?: number;
  /** A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning. */
  hazardCode?: string;
  /** A displayable short phrase describing the forecasted conditions and precipitation intensity/type. */
  shortPhrase?: string;
}

export interface WeatherWaypoint {
  /** Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. */
  iconCode?: number;
  /** A displayable short phrase describing the forecasted conditions and precipitation intensity/type. */
  shortPhrase?: string;
  /** Indicates the time of the day. True indicates 'day',', false indicates 'night. */
  isDayTime?: boolean;
  /** Percent representing cloud cover. */
  cloudCover?: number;
  /** Specific value of a given unit related to weather. */
  temperature?: WeatherUnit;
  /** Wind details being returned including speed and direction. */
  wind?: WindDetails;
  /** Wind details being returned including speed and direction. */
  windGust?: WindDetails;
  /** Precipitation forecast of the weather along the route. */
  precipitation?: WeatherAlongRoutePrecipitation;
  /** Estimation of thunderstorm intensity on an open scale. A value of 0 means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity. */
  lightningCount?: number;
  /** A rating that indicates how blinding the sun is for the driver. */
  sunGlare?: SunGlare;
  /** Description of the weather hazard affecting the trip. */
  hazards?: WeatherHazards;
  /** List of weather hazard notifications. */
  notifications?: WeatherNotification[];
}

/** Precipitation forecast of the weather along the route. */
export interface WeatherAlongRoutePrecipitation {
  /** The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0. */
  dbz?: number;
  /** Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX." */
  type?: string;
}

/** A rating that indicates how blinding the sun is for the driver. */
export interface SunGlare {
  /** If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints if provided. */
  calculatedVehicleHeading?: number;
  /** An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver. */
  glareIndex?: number;
}

export interface WeatherNotification {
  /** A type of notification generated to warn drivers of the onset of a hazard, or increase in intensity of a hazard. */
  type?: string;
  /**
   * A severity/hazard index.
   *   * `0` - No hazard.
   *   * `1` - Be informed, be aware.
   *   * `2` - Pay attention, be prepared.
   *   * `3` - Take action.
   *   * `4` - Life threatening, emergency.
   */
  hazardIndex?: number;
  /** A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning. */
  hazardCode?: string;
  /** A displayable short phrase describing the forecasted conditions and precipitation intensity/type. */
  shortPhrase?: string;
}

/** This object is returned from a successful Get Severe Weather Alerts call. */
export interface SevereWeatherAlertsResponse {
  /** A list of all severe weather alerts for the queried location. */
  results?: SevereWeatherAlert[];
}

/** Information about a severe weather alert. */
export interface SevereWeatherAlert {
  /** 2-character ISO 3166-1 Alpha-2 country code, for example, "US". */
  countryCode?: string;
  /** A unique numerical identifier for a weather alert. */
  alertId?: number;
  /** Description of the alert. */
  description?: SevereWeatherAlertDescription;
  /** Category of the alert. */
  category?: string;
  /** Number signifying the importance or ranking order of the given alert within the country/region it has originated. A lower number signifies a higher priority. For example, 1 is the highest priority. The number varies by country/region and can change over time as each country/region evolves their alert systems. */
  priority?: number;
  /** Classification of the alert. This field is not available for all countries and therefore not always returned. */
  class?: string;
  /** Severity level of the alert. This field is not available for all countries and therefore not always returned. */
  level?: string;
  /** The provider of the alert information. By default the source is returned in English (en-US). The alerts are from official Government Meteorological Agencies and leading global weather alert providers. */
  source?: string;
  /** A numerical identifier associated with the source provider name of the alert data. */
  sourceId?: number;
  /** A disclaimer regarding the source of the alert information. This field is not always available. For example, disclaimer may include details about the delays or potential issues related to the alarm. */
  disclaimer?: string;
  /** Information about the alert specific to the affected area(s). */
  alertAreas?: AlertArea[];
}

/** Description of a severe weather alert. */
export interface SevereWeatherAlertDescription {
  /** Description of the alert in the specified language. By default English (en-US) is returned if the language parameter is not specified in the request. */
  localized?: string;
  /** Description of the alert in English (en-US). */
  english?: string;
}

/** Information about a severe weather alert issued within an affected area(s). If multiple alerts are active for the same location, the alerts will be returned in order of `priority` within the API response, with the highest priority alert being returned at the top of the response. */
export interface AlertArea {
  /** The name of an area which is affected by the alert. The location that was requested falls under the alert area. */
  name?: string;
  /** Text summarizing the alert in the returned area. */
  summary?: string;
  /** The start date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location. */
  startTime?: string;
  /** The end date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location. */
  endTime?: string;
  /** The latest status of the alert in the current area. */
  latestStatus?: LatestStatus;
  /** Full details associated with the alert. Returned if `details`=True. This field is always returned in the language(s) of choice by the issuing provider and Azure Maps only returns what is created by the provider. Please note, some countries/regions may offer their native language and English. Language parameter wonâ€™t apply to this field. */
  alertDetails?: string;
  /** Language of the `alertDetails`. This field  helps to point out that the language of the `alertDetails` may differ from the requested language parameter. Returned if `details`=True. Language code has been derived from the ISO 639-1 Alpha-2 codes. */
  alertDetailsLanguageCode?: string;
}

/** The latest status on the alert in the current area. */
export interface LatestStatus {
  /** The latest status keyword for the alert, in the specified language. By default, returned in English (en-US). */
  localized?: string;
  /** Latest status keyword for the alert, in English (en-US). */
  english?: LatestStatusKeyword;
}

/** This object is returned from a successful Get Daily Indices call. */
export interface DailyIndicesResponse {
  /** A list of all daily indices for the queried location. */
  results?: DailyIndex[];
}

/** Information about a daily index. */
export interface DailyIndex {
  /** Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays". */
  indexName?: string;
  /** Numeric ID used to identify the specific index. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios. */
  indexId?: number;
  /** Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. */
  dateTime?: string;
  /** Index value. Ranges from 0.0 to 10.0. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported ranges. */
  value?: number;
  /** Textual description for `categoryValue` corresponding to the level that the index value falls under, for example "Very Good". */
  category?: string;
  /** Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5. */
  categoryValue?: number;
  /** Describes the direction of the `value` and `categoryValue`. For example, when `ascending`=True, the poorest index value is 0 and the best index value is 10. When `ascending`=True, the poorest index value is 10 and the best index value is 0. */
  ascending?: boolean;
  /** A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be "Conditions are excellent for flying!". */
  description?: string;
}

/** Known values of {@link Geography} that the service accepts. */
export const enum KnownGeography {
  Us = "us",
  Eu = "eu"
}

/**
 * Defines values for Geography. \
 * {@link KnownGeography} can be used interchangeably with Geography,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us** \
 * **eu**
 */
export type Geography = string;

/** Known values of {@link ResponseFormat} that the service accepts. */
export const enum KnownResponseFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json"
}

/**
 * Defines values for ResponseFormat. \
 * {@link KnownResponseFormat} can be used interchangeably with ResponseFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259)
 */
export type ResponseFormat = string;

/** Known values of {@link WeatherDataUnit} that the service accepts. */
export const enum KnownWeatherDataUnit {
  /** Return data in metric units. Some example units of metric system are Celsius and kilometer. */
  Metric = "metric",
  /** Return data in imperial units. Some example units of imperial system are Fahrenheit and mile. */
  Imperial = "imperial"
}

/**
 * Defines values for WeatherDataUnit. \
 * {@link KnownWeatherDataUnit} can be used interchangeably with WeatherDataUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **metric**: Return data in metric units. Some example units of metric system are Celsius and kilometer. \
 * **imperial**: Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
 */
export type WeatherDataUnit = string;

/** Known values of {@link DayQuarter} that the service accepts. */
export const enum KnownDayQuarter {
  /** 7:00 am - 1:00 pm / 7:00- 13:00 */
  Zero = 0,
  /** 1:00 pm - 7:00 pm/ 13:00- 19:00 */
  One = 1,
  /** 7:00 pm - 1:00 am/ 19:00 - 01:00 */
  Two = 2,
  /** 1:00 am - 7:00 am/ 01:00 - 07:00 */
  Three = 3
}

/**
 * Defines values for DayQuarter. \
 * {@link KnownDayQuarter} can be used interchangeably with DayQuarter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **0**: 7:00 am - 1:00 pm \/ 7:00- 13:00 \
 * **1**: 1:00 pm - 7:00 pm\/ 13:00- 19:00 \
 * **2**: 7:00 pm - 1:00 am\/ 19:00 - 01:00 \
 * **3**: 1:00 am - 7:00 am\/ 01:00 - 07:00
 */
export type DayQuarter = number;

/** Known values of {@link LatestStatusKeyword} that the service accepts. */
export const enum KnownLatestStatusKeyword {
  /** "New" - the status of an alert upon initial issuance. */
  New = "New",
  /** "Extend" - the alert has been extended in time, in area, or both since its initial issuance. */
  Extend = "Extend",
  /** "Cancel" - the alert has been canceled prior to its original expiration time. */
  Cancel = "Cancel",
  /** "Correct" - the alert has been modified to correct a previous error. */
  Correct = "Correct",
  /** "Expire" - the alert has expired and is no longer active. */
  Expire = "Expire",
  /** "Upgrade" - the alert has been upgraded to a higher class or category since its initial issuance. */
  Upgrade = "Upgrade",
  /** "Continue" - the alert has been updated since its initial issuance, but no changes were made to `alertAreas`, `startTime`, `endTime`, or `class`. */
  Continue = "Continue",
  /** "Update" - the alert has been updated since its initial issuance. */
  Update = "Update"
}

/**
 * Defines values for LatestStatusKeyword. \
 * {@link KnownLatestStatusKeyword} can be used interchangeably with LatestStatusKeyword,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New**: "New" - the status of an alert upon initial issuance. \
 * **Extend**: "Extend" - the alert has been extended in time, in area, or both since its initial issuance. \
 * **Cancel**: "Cancel" - the alert has been canceled prior to its original expiration time. \
 * **Correct**: "Correct" - the alert has been modified to correct a previous error. \
 * **Expire**: "Expire" - the alert has expired and is no longer active. \
 * **Upgrade**: "Upgrade" - the alert has been upgraded to a higher class or category since its initial issuance. \
 * **Continue**: "Continue" - the alert has been updated since its initial issuance, but no changes were made to `alertAreas`, `startTime`, `endTime`, or `class`. \
 * **Update**: "Update" - the alert has been updated since its initial issuance.
 */
export type LatestStatusKeyword = string;

/** Known values of {@link GeographicResourceLocation} that the service accepts. */
export const enum KnownGeographicResourceLocation {
  /** Used to access an Azure Maps Creator resource in the United States */
  Us = "us",
  /** Used to access an Azure Maps Creator resource in Europe */
  Eu = "eu"
}

/**
 * Defines values for GeographicResourceLocation. \
 * {@link KnownGeographicResourceLocation} can be used interchangeably with GeographicResourceLocation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us**: Used to access an Azure Maps Creator resource in the United States \
 * **eu**: Used to access an Azure Maps Creator resource in Europe
 */
export type GeographicResourceLocation = string;

/** Optional parameters. */
export interface WeatherGetHourlyForecastOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies to return the data in either metric units or imperial units. Default value is metric. */
  unit?: WeatherDataUnit;
  /**
   * Time frame of the returned weather forecast. By default, the forecast data for next hour will be returned. Available values are
   *   * `1` - Return forecast data for the next hour. Default value.
   *   * `12` - Return hourly forecast for next 12 hours.
   *   * `24` - Return hourly forecast for next 24 hours.
   *   * `72` - Return hourly forecast for next 72 hours (3 days).
   *   * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
   *   * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
   */
  duration?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getHourlyForecast operation. */
export type WeatherGetHourlyForecastResponse = HourlyForecastResponse;

/** Optional parameters. */
export interface WeatherGetMinuteForecastOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Specifies time interval in minutes for the returned weather forecast. Supported values are
   *   * `1` -  Retrieve forecast for 1-minute intervals. Returned by default.
   *   * `5` - Retrieve forecasts for 5-minute intervals.
   *   * `15` - Retrieve forecasts for 15-minute intervals.
   */
  interval?: number;
}

/** Contains response data for the getMinuteForecast operation. */
export type WeatherGetMinuteForecastResponse = MinuteForecastResponse;

/** Optional parameters. */
export interface WeatherGetQuarterDayForecastOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies to return the data in either metric units or imperial units. Default value is metric. */
  unit?: WeatherDataUnit;
  /**
   * Specifies for how many days the quester-day forecast responses are returned. Supported values are:
   *   * `1` - Return forecast data for the next day. Returned by default.
   *   * `5` - Return forecast data for the next 5 days.
   *   * `10` - Return forecast data for next 10 days.
   *   * `15` - Return forecast data for the next 15 days.
   */
  duration?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getQuarterDayForecast operation. */
export type WeatherGetQuarterDayForecastResponse = QuarterDayForecastResponse;

/** Optional parameters. */
export interface WeatherGetCurrentConditionsOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies to return the data in either metric units or imperial units. Default value is metric. */
  unit?: WeatherDataUnit;
  /**
   * Time frame of the returned weather conditions. By default, the most current weather conditions will be returned. Default value is 0. Supported values are:
   *    * `0` - Return the most current weather conditions.
   *    * `6` - Return weather conditions from past 6 hours.
   *    * `24` - Return weather conditions from past 24 hours.
   */
  duration?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Return full details for the current conditions. Available values are
   *   * `true` - Returns full details. By default all details are returned.
   *   * `false` - Returns a truncated version of the current condition data, which includes observation date time, weather phrase, icon code, precipitation indicator flag, and temperature.
   */
  details?: string;
}

/** Contains response data for the getCurrentConditions operation. */
export type WeatherGetCurrentConditionsResponse = CurrentConditionsResponse;

/** Optional parameters. */
export interface WeatherGetDailyForecastOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies to return the data in either metric units or imperial units. Default value is metric. */
  unit?: WeatherDataUnit;
  /**
   * Specifies for how many days the daily forecast responses are returned. Available values are
   *   * `1` - Return forecast data for the next day. Returned by default.
   *   * `5` - Return forecast data for the next 5 days.
   *   * `10` - Return forecast data for the next 10 days.
   *   * `25` - Return forecast data for the next 25 days. Only available in S1 SKU.
   *   * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
   */
  duration?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getDailyForecast operation. */
export type WeatherGetDailyForecastResponse = DailyForecastResponse;

/** Optional parameters. */
export interface WeatherGetWeatherAlongRouteOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getWeatherAlongRoute operation. */
export type WeatherGetWeatherAlongRouteResponse = WeatherAlongRouteResponse;

/** Optional parameters. */
export interface WeatherGetSevereWeatherAlertsOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Return full details for the severe weather alerts. Available values are
   *   * `true` - Returns full details. By default all details are returned.
   *   * `false` - Returns a truncated version of the alerts data, which excludes the area-specific full description of alert details (`alertDetails`).
   */
  details?: string;
}

/** Contains response data for the getSevereWeatherAlerts operation. */
export type WeatherGetSevereWeatherAlertsResponse = SevereWeatherAlertsResponse;

/** Optional parameters. */
export interface WeatherGetDailyIndicesOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Specifies for how many days the daily indices are returned. By default, the indices data for the current day will be returned. When requesting future indices data, the current day is included in the response as day 1. Available values are
   *   * `1` - Return daily index data for the current day. Default value.
   *   * `5` - Return 5 days of daily index data starting from the current day.
   *   * `10` - Return 10 days of daily index data starting from the current day.
   *   * `15` - Return 15 days of daily index data starting from the current day.
   */
  duration?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us.
   *
   * Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /** Numeric index identifier that can be used for restricting returned results to the corresponding index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices. */
  indexId?: number;
  /** Numeric index group identifier that can be used for restricting returned results to the corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups. */
  indexGroupId?: number;
}

/** Contains response data for the getDailyIndices operation. */
export type WeatherGetDailyIndicesResponse = DailyIndicesResponse;

/** Optional parameters. */
export interface WeatherClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. */
  geography?: Geography;
  /** Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. */
  xMsClientId?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
