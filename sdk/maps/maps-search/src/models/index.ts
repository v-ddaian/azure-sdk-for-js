/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type GeoJsonObjectUnion =
  | GeoJsonObject
  | GeoJsonGeometryUnion
  | GeoJsonFeature
  | GeoJsonFeatureCollection;
export type GeoJsonGeometryUnion =
  | GeoJsonGeometry
  | GeoJsonLineString
  | GeoJsonPoint
  | GeoJsonMultiPoint
  | GeoJsonMultiLineString
  | GeoJsonPolygon
  | GeoJsonMultiPolygon
  | GeoJsonGeometryCollection;

/** This object is returned from a successful Search Polygon call */
export interface SearchPolygonResponse {
  /**
   * Results array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalData?: SearchPolygonResult[];
}

export interface SearchPolygonResult {
  /**
   * ID of the returned entity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly providerID?: string;
  /**
   * Reason for the failure to obtain data for this provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: string;
  /** Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present. */
  geometryData?: GeoJsonObjectUnion;
}

/** A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details. */
export interface GeoJsonObject {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "LineString"
    | "Point"
    | "MultiPoint"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection"
    | "Feature"
    | "FeatureCollection";
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** This object is returned from a successful Search calls. */
export interface SearchCommonResponse {
  /**
   * Summary object for a Search API response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: SearchCommonSummary;
  /**
   * A list of Search API results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results?: SearchCommonResult[];
}

/** Summary object for a Search API response. */
export interface SearchCommonSummary {
  /**
   * Query property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly query?: string;
  /**
   * QueryType property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryType?: string;
  /**
   * QueryTime property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryTime?: number;
  /**
   * NumResults property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numResults?: number;
  /**
   * Maximum number of responses that will be returned
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /**
   * Offset property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offset?: number;
  /**
   * TotalResults property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalResults?: number;
  /**
   * FuzzyLevel property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fuzzyLevel?: number;
  /**
   * Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoBias?: SearchCommonSummaryGeoBias;
}

/** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
export interface CoordinatesPairAbbreviated {
  /** Latitude property */
  lat?: number;
  /** Longitude property */
  lon?: number;
}

/** Result object for a Search API response. */
export interface SearchCommonResult {
  /**
   * One of:
   * * POI
   * * Street
   * * Geography
   * * Point Address
   * * Address Range
   * * Cross Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Id property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly score?: number;
  /**
   * Straight line distance between the result and geobias location in meters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dist?: number;
  /**
   * Info property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: string;
  /** Geography entity type. Present only when entityType was requested and is available. */
  entityType?: EntityType;
  /**
   * Details of the returned POI including information such as the name, phone, url address, and classifications.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly poi?: SearchResultPoi;
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: SearchResultAddress;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  position?: CoordinatesPairAbbreviated;
  /**
   * The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly viewport?: SearchResultViewport;
  /**
   * Entry Points array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly entryPoints?: SearchResultEntryPoint[];
  /**
   * Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addressRanges?: SearchResultAddressRanges;
  /**
   * Optional section. Reference ids for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSources?: DataSources;
  /**
   * Information on the type of match.
   *
   * One of:
   *   * AddressPoint
   *   * HouseNumberRange
   *   * Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly matchType?: string;
  /**
   * Detour time in seconds
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detourTime?: number;
}

/** Details of the returned POI including information such as the name, phone, url address, and classifications. */
export interface SearchResultPoi {
  /**
   * Name of the POI property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Telephone number property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly phone?: string;
  /**
   * Website URL property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /**
   * The list of the most specific POI categories
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly categorySet?: SearchResultPoiCategorySet[];
  /**
   * __[Deprecated]__ Use classifications instead. Categories array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly categories?: string[];
  /**
   * Classification array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly classifications?: SearchResultPoiClassification[];
  /**
   * Brands array. The name of the brand for the POI being returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly brands?: SearchResultPoiBrand[];
  /** Opening hours for a POI (Points of Interest). */
  openingHours?: SearchResultPoiOpeningHours;
}

/** POI category */
export interface SearchResultPoiCategorySet {
  /**
   * Category ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: number;
}

/** The classification for the POI being returned */
export interface SearchResultPoiClassification {
  /**
   * Code property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Names array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly names?: SearchResultPoiClassificationName[];
}

/** Name for the classification */
export interface SearchResultPoiClassificationName {
  /**
   * Name Locale property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameLocale?: string;
  /**
   * Name property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** The name of the brand for the POI being returned */
export interface SearchResultPoiBrand {
  /**
   * Name of the brand
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** Opening hours for a POI (Points of Interest). */
export interface SearchResultPoiOpeningHours {
  /**
   * Value used in the Request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mode?: string;
  /**
   * List of time ranges for the next 7 days
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeRanges?: SearchResultPoiOpeningHoursTimeRange[];
}

/** Open time range for a day */
export interface SearchResultPoiOpeningHoursTimeRange {
  /** The point in the next 7 days range when a given POI is being opened, or the beginning of the range if it was opened before the range. */
  startTime?: SearchResultPoiOpeningHoursTimeRangeTime;
  /** The point in the next 7 days range when a given POI is being closed, or the beginning of the range if it was closed before the range. */
  endTime?: SearchResultPoiOpeningHoursTimeRangeTime;
}

/** Represents a date and time */
export interface SearchResultPoiOpeningHoursTimeRangeTime {
  /**
   * Represents current day in calendar year in POI time zone.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly date?: string;
  /**
   * Hours are in the 24 hour format in the local time of a POI; possible values are 0 - 23.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hour?: number;
  /**
   * Minutes are in the local time of a POI; possible values are 0 - 59.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minute?: number;
}

/** The address of the result */
export interface SearchResultAddress {
  /**
   * Building Number property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly buildingNumber?: string;
  /**
   * Street property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly street?: string;
  /**
   * Cross Street property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly crossStreet?: string;
  /**
   * Street Number property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetNumber?: string;
  /**
   * number of routes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routeNumbers?: number[];
  /**
   * Street Name property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetName?: string;
  /**
   * Street Name and Number property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetNameAndNumber?: string;
  /**
   * Municipality property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly municipality?: string;
  /**
   * Municipality Subdivision property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly municipalitySubdivision?: string;
  /**
   * Country Tertiary Subdivision property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryTertiarySubdivision?: string;
  /**
   * Country Secondary Subdivision property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySecondarySubdivision?: string;
  /**
   * Country Subdivision property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySubdivision?: string;
  /**
   * Postal Code property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly postalCode?: string;
  /**
   * Extended Postal Code property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedPostalCode?: string;
  /**
   * Country Code property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryCode?: string;
  /**
   * Country property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly country?: string;
  /**
   * Country Code ISO3 property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countryCodeISO3?: string;
  /**
   * Free form Address property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly freeformAddress?: string;
  /**
   * Country Subdivision Name property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countrySubdivisionName?: string;
  /**
   * An address component which represents the name of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit. This field is used to build the `freeformAddress` property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localName?: string;
  /**
   * Bounding box coordinates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly boundingBox?: Record<string, unknown>;
}

/** The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport. */
export interface SearchResultViewport {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  topLeftPoint?: CoordinatesPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  btmRightPoint?: CoordinatesPairAbbreviated;
}

/** The entry point for the POI being returned. */
export interface SearchResultEntryPoint {
  /**
   * The type of entry point. Value can be either _main_ or _minor_.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: EntryPointType;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  position?: CoordinatesPairAbbreviated;
}

/** Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included. */
export interface SearchResultAddressRanges {
  /** Address range on the left side of the street. */
  rangeLeft?: string;
  /** Address range on the right side of the street. */
  rangeRight?: string;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  from?: CoordinatesPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  to?: CoordinatesPairAbbreviated;
}

/** Optional section. Reference ids for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. */
export interface DataSources {
  /** Information about the geometric shape of the result. Only present if type == Geography. */
  geometry?: DataSourcesGeometry;
}

/** Information about the geometric shape of the result. Only present if type == Geography. */
export interface DataSourcesGeometry {
  /**
   * Pass this as geometryId to the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API to fetch geometry information for this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** This object is returned from a successful POI Category Tree call */
export interface SearchPoiCategoryTreeResponse {
  /**
   * Categories array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly poiCategories?: PoiCategoryResult[];
}

/** POI category result */
export interface PoiCategoryResult {
  /**
   * Unique ID for the category. ID can be used to restrict search results to specific categories through other Search Service APIs, like [Get Search POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: number;
  /**
   * Name of the category
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Array of child category ids
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly childCategoryIds?: number[];
  /**
   * Array of alternative names of the category
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synonyms?: string[];
}

/** This object is returned from a successful Search Address Reverse call */
export interface SearchAddressReverseResponse {
  /**
   * Summary object for a Search Address Reverse response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: SearchCommonSummary;
  /**
   * Addresses array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addresses?: SearchAddressReverseResult[];
}

/** Result object for a Search Address Reverse response */
export interface SearchAddressReverseResult {
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: SearchResultAddress;
  /**
   * Position property in the form of "{latitude},{longitude}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly position?: string;
  /**
   * Information on the type of match.
   *
   * One of:
   *   * AddressPoint
   *   * HouseNumberRange
   *   * Street
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly matchType?: string;
}

/** This object is returned from a successful Search Address Reverse CrossStreet call */
export interface SearchAddressReverseCrossStreetResponse {
  /**
   * Summary object for a Search Address Reverse Cross Street response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: SearchCommonSummary;
  /**
   * Addresses array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addresses?: SearchAddressReverseCrossStreetResult[];
}

/** Result object for a Search Address Reverse Cross Street response */
export interface SearchAddressReverseCrossStreetResult {
  /**
   * The address of the result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: SearchResultAddress;
  /**
   * Position property in the form of "{latitude},{longitude}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly position?: string;
}

/** This type represents the request body for the Search Inside Geometry service. */
export interface SearchInsideGeometryRequestBody {
  /** A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details. */
  geometry?: Record<string, unknown>;
}

/** This type represents the request body for the Search Along Route service. */
export interface SearchAlongRouteRequestBody {
  /** A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. */
  route?: GeoJsonLineString;
}

export interface GeoJsonLineStringData {
  /** Coordinates for the `GeoJson LineString` geometry. */
  coordinates: number[][];
}

/** This type represents the request body for the Batch service. */
export interface BatchRequestBody {
  /** The list of queries to process. */
  batchItems?: BatchRequestBodyBatchItemsItem[];
}

/** Batch Query object */
export interface BatchRequestBodyBatchItemsItem {
  /** Partial query string. */
  query?: string;
}

/** This object is returned from a successful Batch service call. Extend with 'batchItems' property. */
export interface BatchResponse {
  /**
   * Summary for the batch request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: BatchResponseSummary;
}

/** Summary for the batch request */
export interface BatchResponseSummary {
  /**
   * Number of successful requests in the batch
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly successfulRequests?: number;
  /**
   * Total number of requests in the batch
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalRequests?: number;
}

/** An item returned from Batch API. Extend with 'response' property. */
export interface BatchItem {
  /**
   * HTTP request status code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusCode?: number;
}

/** Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal. */
export interface SearchSummaryGeoBias {
  /**
   * Latitude property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lat?: number;
  /**
   * Longitude property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lon?: number;
}

/** Data contained by a `GeoJson Point`. */
export interface GeoJsonPointData {
  /** A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details. */
  coordinates: number[];
}

/** Data contained by a `GeoJson MultiPoint`. */
export interface GeoJsonMultiPointData {
  /** Coordinates for the `GeoJson MultiPoint` geometry. */
  coordinates: number[][];
}

export interface GeoJsonMultiLineStringData {
  /** Coordinates for the `GeoJson MultiLineString` geometry. */
  coordinates: number[][][];
}

export interface GeoJsonPolygonData {
  /** Coordinates for the `GeoJson Polygon` geometry type. */
  coordinates: number[][][];
}

export interface GeoJsonMultiPolygonData {
  /** Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  coordinates: number[][][][];
}

export interface GeoJsonGeometryCollectionData {
  /** Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  geometries: GeoJsonGeometryUnion[];
}

export interface GeoJsonFeatureData {
  /** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
  geometry: GeoJsonGeometryUnion;
  /** Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value */
  properties?: Record<string, unknown>;
  /** Identifier for the feature. */
  id?: string;
  /** The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value. */
  featureType?: string;
}

export interface GeoJsonFeatureCollectionData {
  /** Contains a list of valid `GeoJSON Feature` objects. */
  features: GeoJsonFeature[];
}

/** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
export type GeoJsonGeometry = GeoJsonObject & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "LineString"
    | "Point"
    | "MultiPoint"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection";
};

/** A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. */
export type GeoJsonFeature = GeoJsonObject &
  GeoJsonFeatureData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Feature";
  };

/** A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. */
export type GeoJsonFeatureCollection = GeoJsonObject &
  GeoJsonFeatureCollectionData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FeatureCollection";
  };

/** The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise. */
export type SearchFuzzyBatchItemResponse = SearchCommonResponse &
  ErrorResponse & {};

/** The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise. */
export type SearchAddressBatchItemResponse = SearchCommonResponse &
  ErrorResponse & {};

/** The result of the query. SearchAddressReverseResponse if the query completed successfully, ErrorResponse otherwise. */
export type SearchAddressReverseBatchItemResponse = SearchAddressReverseResponse &
  ErrorResponse & {};

/** Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal. */
export type SearchCommonSummaryGeoBias = CoordinatesPairAbbreviated & {};

/** A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. */
export type GeoJsonLineString = GeoJsonGeometry & GeoJsonLineStringData & {};

/** This object is returned from a successful Search Fuzzy Batch service call. */
export type SearchFuzzyBatchResponse = BatchResponse & {
  /**
   * Array containing the batch results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchItems?: SearchFuzzyBatchItem[];
};

/** This object is returned from a successful Search Address Batch service call. */
export type SearchAddressBatchResponse = BatchResponse & {
  /**
   * Array containing the batch results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchItems?: SearchAddressBatchItem[];
};

/** This object is returned from a successful Search Address Reverse Batch service call. */
export type SearchAddressReverseBatchResponse = BatchResponse & {
  /**
   * Array containing the batch results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly batchItems?: SearchAddressReverseBatchItem[];
};

/** An item returned from Search Fuzzy Batch service call. */
export type SearchFuzzyBatchItem = BatchItem & {
  /**
   * The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response?: SearchFuzzyBatchItemResponse;
};

/** An item returned from Search Address Batch service call. */
export type SearchAddressBatchItem = BatchItem & {
  /**
   * The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response?: SearchAddressBatchItemResponse;
};

/** An item returned from Search Address Reverse Batch service call. */
export type SearchAddressReverseBatchItem = BatchItem & {
  /**
   * The result of the query. SearchAddressReverseResponse if the query completed successfully, ErrorResponse otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response?: SearchAddressReverseBatchItemResponse;
};

/** A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details. */
export type GeoJsonPoint = GeoJsonGeometry & GeoJsonPointData & {};

/** A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details. */
export type GeoJsonMultiPoint = GeoJsonGeometry & GeoJsonMultiPointData & {};

/** A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details. */
export type GeoJsonMultiLineString = GeoJsonGeometry &
  GeoJsonMultiLineStringData & {};

/** A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details. */
export type GeoJsonPolygon = GeoJsonGeometry & GeoJsonPolygonData & {};

/** A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details. */
export type GeoJsonMultiPolygon = GeoJsonGeometry &
  GeoJsonMultiPolygonData & {};

/** A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details. */
export type GeoJsonGeometryCollection = GeoJsonGeometry &
  GeoJsonGeometryCollectionData & {};

/** Defines headers for Search_postSearchFuzzyBatch operation. */
export interface SearchPostSearchFuzzyBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_postSearchAddressBatch operation. */
export interface SearchPostSearchAddressBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Defines headers for Search_postSearchAddressReverseBatch operation. */
export interface SearchPostSearchAddressReverseBatchHeaders {
  /** New URL to check for the results of the long running process. */
  location?: string;
}

/** Known values of {@link Geography} that the service accepts. */
export const enum KnownGeography {
  Us = "us",
  Eu = "eu"
}

/**
 * Defines values for Geography. \
 * {@link KnownGeography} can be used interchangeably with Geography,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us** \
 * **eu**
 */
export type Geography = string;

/** Known values of {@link ResponseFormat} that the service accepts. */
export const enum KnownResponseFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json"
}

/**
 * Defines values for ResponseFormat. \
 * {@link KnownResponseFormat} can be used interchangeably with ResponseFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259)
 */
export type ResponseFormat = string;

/** Known values of {@link GeoJsonObjectType} that the service accepts. */
export const enum KnownGeoJsonObjectType {
  /** `GeoJSON Point` geometry. */
  GeoJsonPoint = "Point",
  /** `GeoJSON MultiPoint` geometry. */
  GeoJsonMultiPoint = "MultiPoint",
  /** `GeoJSON LineString` geometry. */
  GeoJsonLineString = "LineString",
  /** `GeoJSON MultiLineString` geometry. */
  GeoJsonMultiLineString = "MultiLineString",
  /** `GeoJSON Polygon` geometry. */
  GeoJsonPolygon = "Polygon",
  /** `GeoJSON MultiPolygon` geometry. */
  GeoJsonMultiPolygon = "MultiPolygon",
  /** `GeoJSON GeometryCollection` geometry. */
  GeoJsonGeometryCollection = "GeometryCollection",
  /** `GeoJSON Feature` object. */
  GeoJsonFeature = "Feature",
  /** `GeoJSON FeatureCollection` object. */
  GeoJsonFeatureCollection = "FeatureCollection"
}

/**
 * Defines values for GeoJsonObjectType. \
 * {@link KnownGeoJsonObjectType} can be used interchangeably with GeoJsonObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Point**: `GeoJSON Point` geometry. \
 * **MultiPoint**: `GeoJSON MultiPoint` geometry. \
 * **LineString**: `GeoJSON LineString` geometry. \
 * **MultiLineString**: `GeoJSON MultiLineString` geometry. \
 * **Polygon**: `GeoJSON Polygon` geometry. \
 * **MultiPolygon**: `GeoJSON MultiPolygon` geometry. \
 * **GeometryCollection**: `GeoJSON GeometryCollection` geometry. \
 * **Feature**: `GeoJSON Feature` object. \
 * **FeatureCollection**: `GeoJSON FeatureCollection` object.
 */
export type GeoJsonObjectType = string;

/** Known values of {@link TextFormat} that the service accepts. */
export const enum KnownTextFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json",
  /** [The Extensible Markup Language](https://www.w3.org/TR/xml/) */
  Xml = "xml"
}

/**
 * Defines values for TextFormat. \
 * {@link KnownTextFormat} can be used interchangeably with TextFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259) \
 * **xml**: [The Extensible Markup Language](https:\/\/www.w3.org\/TR\/xml\/)
 */
export type TextFormat = string;

/** Known values of {@link SearchIndexSet} that the service accepts. */
export const enum KnownSearchIndexSet {
  /** Address range interpolation */
  Addr = "Addr",
  /** Geographies */
  Geo = "Geo",
  /** Point Addresses */
  PAD = "PAD",
  /** Points of interest */
  POI = "POI",
  /** Streets */
  Str = "Str",
  /** Cross Streets (Intersections) */
  Xstr = "Xstr"
}

/**
 * Defines values for SearchIndexSet. \
 * {@link KnownSearchIndexSet} can be used interchangeably with SearchIndexSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Addr**: Address range interpolation \
 * **Geo**: Geographies \
 * **PAD**: Point Addresses \
 * **POI**: Points of interest \
 * **Str**: Streets \
 * **Xstr**: Cross Streets (Intersections)
 */
export type SearchIndexSet = string;

/** Known values of {@link ConnectorSet} that the service accepts. */
export const enum KnownConnectorSet {
  /**
   * These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.
   *
   * See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)
   */
  StandardHouseholdCountrySpecific = "StandardHouseholdCountrySpecific",
  /** Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure. */
  IEC62196Type1 = "IEC62196Type1",
  /** Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. */
  IEC62196Type1CCS = "IEC62196Type1CCS",
  /** Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point */
  IEC62196Type2CableAttached = "IEC62196Type2CableAttached",
  /** Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point. */
  IEC62196Type2Outlet = "IEC62196Type2Outlet",
  /** Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. */
  IEC62196Type2CCS = "IEC62196Type2CCS",
  /** Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure. */
  IEC62196Type3 = "IEC62196Type3",
  /** CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging. */
  Chademo = "Chademo",
  /** Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration. */
  IEC60309AC1PhaseBlue = "IEC60309AC1PhaseBlue",
  /** Industrial White connector is a DC connector defined in the IEC 60309 standard. */
  IEC60309DCWhite = "IEC60309DCWhite",
  /** The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe. */
  Tesla = "Tesla"
}

/**
 * Defines values for ConnectorSet. \
 * {@link KnownConnectorSet} can be used interchangeably with ConnectorSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StandardHouseholdCountrySpecific**: These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.
 *
 * See also: [Plug & socket types - World Standards](https:\/\/www.worldstandards.eu\/electricity\/plugs-and-sockets) \
 * **IEC62196Type1**: Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure. \
 * **IEC62196Type1CCS**: Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. \
 * **IEC62196Type2CableAttached**: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point \
 * **IEC62196Type2Outlet**: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point. \
 * **IEC62196Type2CCS**: Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging. \
 * **IEC62196Type3**: Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure. \
 * **Chademo**: CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging. \
 * **IEC60309AC1PhaseBlue**: Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration. \
 * **IEC60309DCWhite**: Industrial White connector is a DC connector defined in the IEC 60309 standard. \
 * **Tesla**: The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
 */
export type ConnectorSet = string;

/** Known values of {@link OpeningHours} that the service accepts. */
export const enum KnownOpeningHours {
  /** Shows the hours of operation for the next week, starting with the current day in the local time of the POI. */
  NextSevenDays = "nextSevenDays"
}

/**
 * Defines values for OpeningHours. \
 * {@link KnownOpeningHours} can be used interchangeably with OpeningHours,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **nextSevenDays**: Shows the hours of operation for the next week, starting with the current day in the local time of the POI.
 */
export type OpeningHours = string;

/** Known values of {@link EntityType} that the service accepts. */
export const enum KnownEntityType {
  /** Country name */
  Country = "Country",
  /** State or Province */
  CountrySubdivision = "CountrySubdivision",
  /** County */
  CountrySecondarySubdivision = "CountrySecondarySubdivision",
  /** Named Area */
  CountryTertiarySubdivision = "CountryTertiarySubdivision",
  /** City / Town */
  Municipality = "Municipality",
  /** Sub / Super City */
  MunicipalitySubdivision = "MunicipalitySubdivision",
  /** Neighbourhood */
  Neighbourhood = "Neighbourhood",
  /** Postal Code / Zip Code */
  PostalCodeArea = "PostalCodeArea"
}

/**
 * Defines values for EntityType. \
 * {@link KnownEntityType} can be used interchangeably with EntityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Country**: Country name \
 * **CountrySubdivision**: State or Province \
 * **CountrySecondarySubdivision**: County \
 * **CountryTertiarySubdivision**: Named Area \
 * **Municipality**: City \/ Town \
 * **MunicipalitySubdivision**: Sub \/ Super City \
 * **Neighbourhood**: Neighbourhood \
 * **PostalCodeArea**: Postal Code \/ Zip Code
 */
export type EntityType = string;

/** Known values of {@link EntryPointType} that the service accepts. */
export const enum KnownEntryPointType {
  Main = "main",
  Minor = "minor"
}

/**
 * Defines values for EntryPointType. \
 * {@link KnownEntryPointType} can be used interchangeably with EntryPointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **main** \
 * **minor**
 */
export type EntryPointType = string;

/** Known values of {@link GeographicResourceLocation} that the service accepts. */
export const enum KnownGeographicResourceLocation {
  /** Used to access an Azure Maps Creator resource in the United States */
  Us = "us",
  /** Used to access an Azure Maps Creator resource in Europe */
  Eu = "eu"
}

/**
 * Defines values for GeographicResourceLocation. \
 * {@link KnownGeographicResourceLocation} can be used interchangeably with GeographicResourceLocation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us**: Used to access an Azure Maps Creator resource in the United States \
 * **eu**: Used to access an Azure Maps Creator resource in Europe
 */
export type GeographicResourceLocation = string;

/** Optional parameters. */
export interface SearchGetSearchPolygonOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSearchPolygon operation. */
export type SearchGetSearchPolygonResponse = SearchPolygonResponse;

/** Optional parameters. */
export interface SearchGetSearchFuzzyOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  typeahead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countrySet?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * Minimum fuzziness level to be used. Default: 1, minimum: 1 and maximum: 4
   *
   * * Level 1 has no spell checking.
   *
   * * Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant."
   *
   * * Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching.
   *
   * * Level 4 doesn’t add any more spell checking functions.
   *
   *
   *
   * The search engine will start looking for a match on the level defined by minFuzzyLevel, and will stop searching at the level specified by maxFuzzyLevel.
   */
  minFuzzyLevel?: number;
  /**
   * Maximum fuzziness level to be used. Default: 2, minimum: 1 and maximum: 4
   *
   * * Level 1 has no spell checking.
   *
   * * Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant."
   *
   * * Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching.
   *
   * * Level 4 doesn’t add any more spell checking functions.
   *
   *
   *
   * The search engine will start looking for a match on the level defined by minFuzzyLevel, and will stop searching at the level specified by maxFuzzyLevel.
   */
  maxFuzzyLevel?: number;
  /** A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections) */
  idxSet?: SearchIndexSet[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandSet?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  connectorSet?: ConnectorSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available.
   * Supported value: nextSevenDays
   */
  openingHours?: OpeningHours;
}

/** Contains response data for the getSearchFuzzy operation. */
export type SearchGetSearchFuzzyResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchGetSearchPOIOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  typeahead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countrySet?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **POI** = Points of Interest
   *
   * Value should be **POI** or **None** to disable extended postal codes.
   *
   * By default extended postal codes are included.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandSet?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  connectorSet?: ConnectorSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available.
   * Supported value: nextSevenDays
   */
  openingHours?: OpeningHours;
}

/** Contains response data for the getSearchPOI operation. */
export type SearchGetSearchPOIResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchGetSearchNearbyOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countrySet?: string[];
  /** The radius in meters to for the results to be constrained to the defined area, Min value is 1, Max Value is 50000. */
  radius?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandSet?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  connectorSet?: ConnectorSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
}

/** Contains response data for the getSearchNearby operation. */
export type SearchGetSearchNearbyResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchGetSearchPOICategoryOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  typeahead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countrySet?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandSet?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  connectorSet?: ConnectorSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available.
   * Supported value: nextSevenDays
   */
  openingHours?: OpeningHours;
}

/** Contains response data for the getSearchPOICategory operation. */
export type SearchGetSearchPOICategoryResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchGetSearchPOICategoryTreePreviewOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not available for a specific field, default language is used (English).
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
}

/** Contains response data for the getSearchPOICategoryTreePreview operation. */
export type SearchGetSearchPOICategoryTreePreviewResponse = SearchPoiCategoryTreeResponse;

/** Optional parameters. */
export interface SearchGetSearchAddressOptionalParams
  extends coreClient.OperationOptions {
  /** Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode */
  typeahead?: boolean;
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /** Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries */
  countrySet?: string[];
  /** Latitude where results should be biased. E.g. 37.337 */
  lat?: number;
  /** Longitude where results should be biased. E.g. -121.89 */
  lon?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /** Top left position of the bounding box. E.g. 37.553,-122.453 */
  topLeft?: string;
  /** Bottom right position of the bounding box. E.g. 37.553,-122.453 */
  btmRight?: string;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
}

/** Contains response data for the getSearchAddress operation. */
export type SearchGetSearchAddressResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchGetSearchAddressReverseOptionalParams
  extends coreClient.OperationOptions {
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /** Boolean. To enable return of the posted speed limit */
  returnSpeedLimit?: boolean;
  /** The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place */
  heading?: number;
  /** If a number is sent in along with the request, the response may include the side of the street (Left/Right) and also an offset position for that number */
  numberParam?: string;
  /** Boolean. To enable return of the road use array for reverse geocodes at street level */
  returnRoadUse?: boolean;
  /** To restrict reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of LimitedAccess, Arterial, Terminal, Ramp, Rotary, LocalStreet */
  roadUse?: string;
  /**
   * Format of newlines in the formatted address.
   *
   * If true, the address will contain newlines.
   * If false, newlines will be converted to commas.
   */
  allowFreeformNewline?: boolean;
  /** Include information on the type of match the geocoder achieved in the response. */
  returnMatchType?: boolean;
  /**
   * Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
   *
   * * heading
   * * number
   * * returnRoadUse
   * * returnSpeedLimit
   * * roadUse
   * * returnMatchType
   */
  entityType?: EntityType;
}

/** Contains response data for the getSearchAddressReverse operation. */
export type SearchGetSearchAddressReverseResponse = SearchAddressReverseResponse;

/** Optional parameters. */
export interface SearchGetSearchAddressReverseCrossStreetOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** The radius in meters to for the results to be constrained to the defined area */
  radius?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /** The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place */
  heading?: number;
}

/** Contains response data for the getSearchAddressReverseCrossStreet operation. */
export type SearchGetSearchAddressReverseCrossStreetResponse = SearchAddressReverseCrossStreetResponse;

/** Optional parameters. */
export interface SearchGetSearchAddressStructuredOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /** Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900 */
  ofs?: number;
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /** The 2 or 3 letter [ISO3166-1](https://www.iso.org/iso-3166-country-codes.html) country code portion of an address. E.g. US. */
  countryCode?: string;
  /** The street number portion of an address */
  streetNumber?: string;
  /** The street name portion of an address */
  streetName?: string;
  /** The cross street name for the structured address */
  crossStreet?: string;
  /** The municipality portion of an address */
  municipality?: string;
  /** The municipality subdivision (sub/super city) for the structured address */
  municipalitySubdivision?: string;
  /** The named area for the structured address */
  countryTertiarySubdivision?: string;
  /** The county for the structured address */
  countrySecondarySubdivision?: string;
  /** The country subdivision portion of an address */
  countrySubdivision?: string;
  /** The postal code portion of an address */
  postalCode?: string;
}

/** Contains response data for the getSearchAddressStructured operation. */
export type SearchGetSearchAddressStructuredResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchPostSearchInsideGeometryOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100 */
  limit?: number;
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /**
   * Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
   *
   * Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
   */
  language?: string;
  /**
   * Indexes for which extended postal codes should be included in the results.
   *
   * Available indexes are:
   *
   *  **Addr** = Address ranges
   *
   *  **Geo** = Geographies
   *
   *  **PAD** = Point Addresses
   *
   *  **POI** = Points of Interest
   *
   *  **Str** = Streets
   *
   *  **XStr** = Cross Streets (intersections)
   *
   * Value should be a comma separated list of index types (in any order) or **None** for no indexes.
   *
   * By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
   *
   * Usage examples:
   *
   *  extendedPostalCodesFor=POI
   *
   *  extendedPostalCodesFor=PAD,Addr,POI
   *
   *  extendedPostalCodesFor=None
   *
   * Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
   */
  extendedPostalCodesFor?: string;
  /** A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections) */
  idxSet?: SearchIndexSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available.
   * Supported value: nextSevenDays
   */
  openingHours?: OpeningHours;
}

/** Contains response data for the postSearchInsideGeometry operation. */
export type SearchPostSearchInsideGeometryResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchPostSearchAlongRouteOptionalParams
  extends coreClient.OperationOptions {
  /**
   * A comma-separated list of category set IDs which could be used to restrict the result to specific Points of Interest categories. ID order does not matter. When multiple category identifiers are provided, only POIs that belong to (at least) one of the categories from the provided list will be returned. The list of supported categories can be discovered using  [POI Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:
   *
   * * **categorySet=7315** (Search Points of Interest from category Restaurant)
   *
   * * **categorySet=7315025,7315017** (Search Points of Interest of category either Italian or French Restaurant)
   */
  categorySet?: number[];
  /**
   * A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a "," in their name should be put into quotes.
   *
   * Usage examples:
   *
   *  brandSet=Foo
   *
   *  brandSet=Foo,Bar
   *
   *  brandSet="A,B,C Comma",Bar
   */
  brandSet?: string[];
  /**
   * A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.
   *
   * Available connector types are:
   *   * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
   *   * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
   *   * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
   *   * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
   *   * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
   *   * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
   *   * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
   *   * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
   *   * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
   *   * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.
   *
   * Usage examples:
   *
   *  connectorSet=IEC62196Type2CableAttached
   *  connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
   */
  connectorSet?: ConnectorSet[];
  /**
   * The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.
   *
   * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.
   */
  view?: string;
  /**
   * Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available.
   * Supported value: nextSevenDays
   */
  openingHours?: OpeningHours;
  /** Maximum number of responses that will be returned. Default value is 10. Max value is 20 */
  limit?: number;
}

/** Contains response data for the postSearchAlongRoute operation. */
export type SearchPostSearchAlongRouteResponse = SearchCommonResponse;

/** Optional parameters. */
export interface SearchPostSearchFuzzyBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the postSearchFuzzyBatchSync operation. */
export type SearchPostSearchFuzzyBatchSyncResponse = SearchFuzzyBatchResponse;

/** Optional parameters. */
export interface SearchPostSearchFuzzyBatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postSearchFuzzyBatch operation. */
export type SearchPostSearchFuzzyBatchResponse = SearchFuzzyBatchResponse;

/** Optional parameters. */
export interface SearchPostSearchAddressBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the postSearchAddressBatchSync operation. */
export type SearchPostSearchAddressBatchSyncResponse = SearchAddressBatchResponse;

/** Optional parameters. */
export interface SearchPostSearchAddressBatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postSearchAddressBatch operation. */
export type SearchPostSearchAddressBatchResponse = SearchAddressBatchResponse;

/** Optional parameters. */
export interface SearchPostSearchAddressReverseBatchSyncOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the postSearchAddressReverseBatchSync operation. */
export type SearchPostSearchAddressReverseBatchSyncResponse = SearchAddressReverseBatchResponse;

/** Optional parameters. */
export interface SearchPostSearchAddressReverseBatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postSearchAddressReverseBatch operation. */
export type SearchPostSearchAddressReverseBatchResponse = SearchAddressReverseBatchResponse;

/** Optional parameters. */
export interface SearchClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. */
  geography?: Geography;
  /** Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. */
  xMsClientId?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
