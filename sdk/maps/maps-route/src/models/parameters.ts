/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  PostRouteMatrixRequestBody as PostRouteMatrixRequestBodyMapper,
  PostRouteDirectionsRequestBody as PostRouteDirectionsRequestBodyMapper,
  BatchRequestBody as BatchRequestBodyMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const postRouteMatrixRequestBody: OperationParameter = {
  parameterPath: "postRouteMatrixRequestBody",
  mapper: PostRouteMatrixRequestBodyMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const geography: OperationURLParameter = {
  parameterPath: "geography",
  mapper: {
    serializedName: "geography",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const xMsClientId: OperationParameter = {
  parameterPath: "xMsClientId",
  mapper: {
    serializedName: "x-ms-client-id",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const format: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const waitForResults: OperationQueryParameter = {
  parameterPath: ["options", "waitForResults"],
  mapper: {
    serializedName: "waitForResults",
    type: {
      name: "Boolean"
    }
  }
};

export const computeTravelTimeFor: OperationQueryParameter = {
  parameterPath: ["options", "computeTravelTimeFor"],
  mapper: {
    serializedName: "computeTravelTimeFor",
    type: {
      name: "String"
    }
  }
};

export const sectionType: OperationQueryParameter = {
  parameterPath: ["options", "sectionType"],
  mapper: {
    serializedName: "sectionType",
    type: {
      name: "String"
    }
  }
};

export const arriveAt: OperationQueryParameter = {
  parameterPath: ["options", "arriveAt"],
  mapper: {
    serializedName: "arriveAt",
    type: {
      name: "DateTime"
    }
  }
};

export const departAt: OperationQueryParameter = {
  parameterPath: ["options", "departAt"],
  mapper: {
    serializedName: "departAt",
    type: {
      name: "DateTime"
    }
  }
};

export const vehicleAxleWeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleAxleWeight"],
  mapper: {
    serializedName: "vehicleAxleWeight",
    type: {
      name: "Number"
    }
  }
};

export const vehicleLength: OperationQueryParameter = {
  parameterPath: ["options", "vehicleLength"],
  mapper: {
    serializedName: "vehicleLength",
    type: {
      name: "Number"
    }
  }
};

export const vehicleHeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleHeight"],
  mapper: {
    serializedName: "vehicleHeight",
    type: {
      name: "Number"
    }
  }
};

export const vehicleWidth: OperationQueryParameter = {
  parameterPath: ["options", "vehicleWidth"],
  mapper: {
    serializedName: "vehicleWidth",
    type: {
      name: "Number"
    }
  }
};

export const vehicleMaxSpeed: OperationQueryParameter = {
  parameterPath: ["options", "vehicleMaxSpeed"],
  mapper: {
    serializedName: "vehicleMaxSpeed",
    type: {
      name: "Number"
    }
  }
};

export const vehicleWeight: OperationQueryParameter = {
  parameterPath: ["options", "vehicleWeight"],
  mapper: {
    serializedName: "vehicleWeight",
    type: {
      name: "Number"
    }
  }
};

export const windingness: OperationQueryParameter = {
  parameterPath: ["options", "windingness"],
  mapper: {
    serializedName: "windingness",
    type: {
      name: "String"
    }
  }
};

export const hilliness: OperationQueryParameter = {
  parameterPath: ["options", "hilliness"],
  mapper: {
    serializedName: "hilliness",
    type: {
      name: "String"
    }
  }
};

export const travelMode: OperationQueryParameter = {
  parameterPath: ["options", "travelMode"],
  mapper: {
    serializedName: "travelMode",
    type: {
      name: "String"
    }
  }
};

export const avoid: OperationQueryParameter = {
  parameterPath: ["options", "avoid"],
  mapper: {
    serializedName: "avoid",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Multi"
};

export const traffic: OperationQueryParameter = {
  parameterPath: ["options", "traffic"],
  mapper: {
    serializedName: "traffic",
    type: {
      name: "Boolean"
    }
  }
};

export const routeType: OperationQueryParameter = {
  parameterPath: ["options", "routeType"],
  mapper: {
    serializedName: "routeType",
    type: {
      name: "String"
    }
  }
};

export const vehicleLoadType: OperationQueryParameter = {
  parameterPath: ["options", "vehicleLoadType"],
  mapper: {
    serializedName: "vehicleLoadType",
    type: {
      name: "String"
    }
  }
};

export const format1: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const query: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const maxAlternatives: OperationQueryParameter = {
  parameterPath: ["options", "maxAlternatives"],
  mapper: {
    constraints: {
      InclusiveMaximum: 5,
      InclusiveMinimum: 0
    },
    serializedName: "maxAlternatives",
    type: {
      name: "Number"
    }
  }
};

export const alternativeType: OperationQueryParameter = {
  parameterPath: ["options", "alternativeType"],
  mapper: {
    serializedName: "alternativeType",
    type: {
      name: "String"
    }
  }
};

export const minDeviationDistance: OperationQueryParameter = {
  parameterPath: ["options", "minDeviationDistance"],
  mapper: {
    serializedName: "minDeviationDistance",
    type: {
      name: "Number"
    }
  }
};

export const minDeviationTime: OperationQueryParameter = {
  parameterPath: ["options", "minDeviationTime"],
  mapper: {
    serializedName: "minDeviationTime",
    type: {
      name: "Number"
    }
  }
};

export const instructionsType: OperationQueryParameter = {
  parameterPath: ["options", "instructionsType"],
  mapper: {
    serializedName: "instructionsType",
    type: {
      name: "String"
    }
  }
};

export const language: OperationQueryParameter = {
  parameterPath: ["options", "language"],
  mapper: {
    serializedName: "language",
    type: {
      name: "String"
    }
  }
};

export const computeBestOrder: OperationQueryParameter = {
  parameterPath: ["options", "computeBestOrder"],
  mapper: {
    serializedName: "computeBestOrder",
    type: {
      name: "Boolean"
    }
  }
};

export const routeRepresentation: OperationQueryParameter = {
  parameterPath: ["options", "routeRepresentation"],
  mapper: {
    serializedName: "routeRepresentation",
    type: {
      name: "String"
    }
  }
};

export const vehicleHeading: OperationQueryParameter = {
  parameterPath: ["options", "vehicleHeading"],
  mapper: {
    constraints: {
      InclusiveMaximum: 359,
      InclusiveMinimum: 0
    },
    serializedName: "vehicleHeading",
    type: {
      name: "Number"
    }
  }
};

export const report: OperationQueryParameter = {
  parameterPath: ["options", "report"],
  mapper: {
    serializedName: "report",
    type: {
      name: "String"
    }
  }
};

export const vehicleCommercial: OperationQueryParameter = {
  parameterPath: ["options", "vehicleCommercial"],
  mapper: {
    serializedName: "vehicleCommercial",
    type: {
      name: "Boolean"
    }
  }
};

export const vehicleEngineType: OperationQueryParameter = {
  parameterPath: ["options", "vehicleEngineType"],
  mapper: {
    serializedName: "vehicleEngineType",
    type: {
      name: "String"
    }
  }
};

export const constantSpeedConsumptionInLitersPerHundredkm: OperationQueryParameter = {
  parameterPath: ["options", "constantSpeedConsumptionInLitersPerHundredkm"],
  mapper: {
    serializedName: "constantSpeedConsumptionInLitersPerHundredkm",
    type: {
      name: "Number"
    }
  }
};

export const currentFuelInLiters: OperationQueryParameter = {
  parameterPath: ["options", "currentFuelInLiters"],
  mapper: {
    serializedName: "currentFuelInLiters",
    type: {
      name: "Number"
    }
  }
};

export const auxiliaryPowerInLitersPerHour: OperationQueryParameter = {
  parameterPath: ["options", "auxiliaryPowerInLitersPerHour"],
  mapper: {
    serializedName: "auxiliaryPowerInLitersPerHour",
    type: {
      name: "Number"
    }
  }
};

export const fuelEnergyDensityInMJoulesPerLiter: OperationQueryParameter = {
  parameterPath: ["options", "fuelEnergyDensityInMJoulesPerLiter"],
  mapper: {
    serializedName: "fuelEnergyDensityInMJoulesPerLiter",
    type: {
      name: "Number"
    }
  }
};

export const accelerationEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "accelerationEfficiency"],
  mapper: {
    serializedName: "accelerationEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const decelerationEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "decelerationEfficiency"],
  mapper: {
    serializedName: "decelerationEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const uphillEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "uphillEfficiency"],
  mapper: {
    serializedName: "uphillEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const downhillEfficiency: OperationQueryParameter = {
  parameterPath: ["options", "downhillEfficiency"],
  mapper: {
    serializedName: "downhillEfficiency",
    type: {
      name: "Number"
    }
  }
};

export const constantSpeedConsumptionInkWhPerHundredkm: OperationQueryParameter = {
  parameterPath: ["options", "constantSpeedConsumptionInkWhPerHundredkm"],
  mapper: {
    serializedName: "constantSpeedConsumptionInkWhPerHundredkm",
    type: {
      name: "String"
    }
  }
};

export const currentChargeInkWh: OperationQueryParameter = {
  parameterPath: ["options", "currentChargeInkWh"],
  mapper: {
    serializedName: "currentChargeInkWh",
    type: {
      name: "String"
    }
  }
};

export const maxChargeInkWh: OperationQueryParameter = {
  parameterPath: ["options", "maxChargeInkWh"],
  mapper: {
    serializedName: "maxChargeInkWh",
    type: {
      name: "String"
    }
  }
};

export const auxiliaryPowerInkW: OperationQueryParameter = {
  parameterPath: ["options", "auxiliaryPowerInkW"],
  mapper: {
    serializedName: "auxiliaryPowerInkW",
    type: {
      name: "String"
    }
  }
};

export const postRouteDirectionsRequestBody: OperationParameter = {
  parameterPath: "postRouteDirectionsRequestBody",
  mapper: PostRouteDirectionsRequestBodyMapper
};

export const fuelBudgetInLiters: OperationQueryParameter = {
  parameterPath: ["options", "fuelBudgetInLiters"],
  mapper: {
    serializedName: "fuelBudgetInLiters",
    type: {
      name: "Number"
    }
  }
};

export const energyBudgetInkWh: OperationQueryParameter = {
  parameterPath: ["options", "energyBudgetInkWh"],
  mapper: {
    serializedName: "energyBudgetInkWh",
    type: {
      name: "Number"
    }
  }
};

export const timeBudgetInSec: OperationQueryParameter = {
  parameterPath: ["options", "timeBudgetInSec"],
  mapper: {
    serializedName: "timeBudgetInSec",
    type: {
      name: "Number"
    }
  }
};

export const distanceBudgetInMeters: OperationQueryParameter = {
  parameterPath: ["options", "distanceBudgetInMeters"],
  mapper: {
    serializedName: "distanceBudgetInMeters",
    type: {
      name: "Number"
    }
  }
};

export const postRouteDirectionsBatchRequestBody: OperationParameter = {
  parameterPath: "postRouteDirectionsBatchRequestBody",
  mapper: BatchRequestBodyMapper
};
