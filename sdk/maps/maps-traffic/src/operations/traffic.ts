/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Traffic } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficClientContext } from "../trafficClientContext";
import {
  TileFormat,
  TrafficFlowTileStyle,
  TrafficGetTrafficFlowTileOptionalParams,
  TrafficGetTrafficFlowTileResponse,
  TextFormat,
  TrafficFlowSegmentStyle,
  TrafficGetTrafficFlowSegmentOptionalParams,
  TrafficGetTrafficFlowSegmentResponse,
  TrafficIncidentTileStyle,
  TrafficGetTrafficIncidentTileOptionalParams,
  TrafficGetTrafficIncidentTileResponse,
  TrafficIncidentDetailStyle,
  TrafficGetTrafficIncidentDetailOptionalParams,
  TrafficGetTrafficIncidentDetailResponse,
  TrafficGetTrafficIncidentViewportOptionalParams,
  TrafficGetTrafficIncidentViewportResponse
} from "../models";

/** Class representing a Traffic. */
export class TrafficImpl implements Traffic {
  private readonly client: TrafficClientContext;

  /**
   * Initialize a new instance of the class Traffic class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficClientContext) {
    this.client = client;
  }

  /**
   * __Traffic Flow Tile__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   * The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same
   * grid system. Because the traffic tiles use transparent images, they can be layered on top of map
   * tiles to create a compound  display. The Flow tiles use colors to indicate either the speed of
   * traffic on different road segments, or the difference between that speed and the free-flow speed on
   * the road segment in question.
   * @param format Desired format of the response. Possible values are png & pbf.
   * @param style <p>The style to be used to render the tile.</p>
   * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22
   *             (inclusive). For _vector_ tiles, value must be in the range: 0-22 (inclusive).
   *             Please see [Zoom Levels and Tile
   *             Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *             details.
   * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
   *                   2<sup>`zoom`</sup> -1].
   *
   * Please see [Zoom Levels and Tile
   *                   Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *                   details.
   * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
   *                   2<sup>`zoom`</sup> -1].
   *
   * Please see [Zoom Levels and Tile
   *                   Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *                   details.
   * @param options The options parameters.
   */
  getTrafficFlowTile(
    format: TileFormat,
    style: TrafficFlowTileStyle,
    zoom: number,
    xTileIndex: number,
    yTileIndex: number,
    options?: TrafficGetTrafficFlowTileOptionalParams
  ): Promise<TrafficGetTrafficFlowTileResponse> {
    return this.client.sendOperationRequest(
      { format, style, zoom, xTileIndex, yTileIndex, options },
      getTrafficFlowTileOperationSpec
    );
  }

  /**
   * __Traffic Flow Segment__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   * This service provides information about the speeds and travel times of the road fragment closest to
   * the given coordinates. It is designed to work alongside the Flow layer of the Render Service to
   * support clickable  flow data visualizations. With this API, the client side can connect any place in
   * the map with flow data on the  closest road and present it to the user.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param style The style to be used to render the tile. Valid values are absolute which returns colors
   *              reflecting the absolute speed measured, relative which returns the speed relative to free-flow,
   *              Relative-delay which displays relative speeds only where they are different from the freeflow speeds
   * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive).
   *             Please see [Zoom Levels and Tile
   *             Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *             details.
   * @param query Coordinates of the point close to the road segment. They have to be comma-separated and
   *              calculated using EPSG4326 projection.
   * @param options The options parameters.
   */
  getTrafficFlowSegment(
    format: TextFormat,
    style: TrafficFlowSegmentStyle,
    zoom: number,
    query: string,
    options?: TrafficGetTrafficFlowSegmentOptionalParams
  ): Promise<TrafficGetTrafficFlowSegmentResponse> {
    return this.client.sendOperationRequest(
      { format, style, zoom, query, options },
      getTrafficFlowSegmentOperationSpec
    );
  }

  /**
   * __Traffic Incident Tile__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   * This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid
   * system. Because the traffic tiles use transparent images, they can be layered on top of map tiles to
   * create a compound display. Traffic tiles render graphics to indicate traffic on the roads in the
   * specified area.
   * @param format Desired format of the response. Possible values are png & pbf.
   * @param style The style to be used to render the tile. This parameter is not valid when format is
   *              pbf.
   * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22
   *             (inclusive). For _vector_ tiles, value must be in the range: 0-22 (inclusive).
   *             Please see [Zoom Levels and Tile
   *             Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *             details.
   * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
   *                   2<sup>`zoom`</sup> -1].
   *
   * Please see [Zoom Levels and Tile
   *                   Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *                   details.
   * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
   *                   2<sup>`zoom`</sup> -1].
   *
   * Please see [Zoom Levels and Tile
   *                   Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for
   *                   details.
   * @param options The options parameters.
   */
  getTrafficIncidentTile(
    format: TileFormat,
    style: TrafficIncidentTileStyle,
    zoom: number,
    xTileIndex: number,
    yTileIndex: number,
    options?: TrafficGetTrafficIncidentTileOptionalParams
  ): Promise<TrafficGetTrafficIncidentTileResponse> {
    return this.client.sendOperationRequest(
      { format, style, zoom, xTileIndex, yTileIndex, options },
      getTrafficIncidentTileOperationSpec
    );
  }

  /**
   * __Traffic Incident Detail__
   *
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   * This API provides information on traffic incidents inside a given bounding box, based on the current
   * Traffic  Model ID. The Traffic Model ID is available to grant synchronization of data between calls
   * and API's. The  Traffic Model ID is a key value for determining the currency of traffic incidents.
   * It is updated every minute,  and is valid for two minutes before it times out. It is used in
   * rendering  [incident
   * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be
   * obtained from the [Viewport
   * API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param style The style that will be used to render the tile in Traffic [Incident Tile
   *              API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile).  This will have
   *              an effect on the coordinates of traffic incidents in the reply.
   * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners
   *                    (first pair for lower left corner and second for upper right). The pairs can either be specified
   *                    using any of the `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two
   *                    latitude-longitude pairs (e.g., _minLat,minLon,maxLat,maxLon_).<br><br>NOTE: If latitude/longitude
   *                    pairs are used, then the `projection` parameter must be set to "EPSG4326".
   * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector
   *                     tiles
   * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
   *                       API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is
   *                       updated every minute, and is valid for two minutes before it times out. If the wrong Traffic Model
   *                       ID is specified, the correct one will be returned by the interface. A value of -1 will always invoke
   *                       the most recent traffic model
   * @param options The options parameters.
   */
  getTrafficIncidentDetail(
    format: TextFormat,
    style: TrafficIncidentDetailStyle,
    boundingbox: string,
    boundingZoom: number,
    trafficmodelid: string,
    options?: TrafficGetTrafficIncidentDetailOptionalParams
  ): Promise<TrafficGetTrafficIncidentDetailResponse> {
    return this.client.sendOperationRequest(
      { format, style, boundingbox, boundingZoom, trafficmodelid, options },
      getTrafficIncidentDetailOperationSpec
    );
  }

  /**
   * __Traffic Incident Viewport__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   * This API returns legal and technical information for the viewport described in the request. It
   * should be called  by client applications whenever the viewport changes (for instance, through
   * zooming, panning, going to a  location, or displaying a route). The request should contain the
   * bounding box and zoom level of the viewport  whose information is needed. The return will contain
   * map version information, as well as the current Traffic  Model ID and copyright IDs. The Traffic
   * Model ID returned by the Viewport Description is used by other APIs to  retrieve last traffic
   * information for further processing.
   * @param format Desired format of the response. Value can be either _json_ or _xml_.
   * @param boundingbox Bounding box of the map viewport in
   *                    [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The
   *                    `boundingbox` is represented by two value pairs describing it's corners (first pair for lower left
   *                    corner and second for upper right). All values should be separated by commas (e.g.,
   *                    _minY,minX,maxY,maxX_). The maximum size of the bounding box that can be passed is dependent on the
   *                    requested zoom level. The width and height cannot exceed 4092 pixels when rendered on the given zoom
   *                    level.<br><br>NOTE: Bounding boxes that cross the 180° meridian require special treatment. For such
   *                    boxes, the eastern _maxX_ value will be negative, and thus less than the _minX_ value west of the
   *                    180° meridian. To address that, the value 40075016.6855874 should be added to the true _maxX_ value
   *                    before it is passed in the request.
   * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed
   *                     in.
   * @param overviewbox Bounding box of the overview map in
   *                    [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.<br><br>Used in
   *                    case the overview box/mini map has different copyright data than the main map. If there is no mini
   *                    map, the same coordinates as `boundingBox` is used.
   * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level
   *                     as boundingZoom.
   * @param options The options parameters.
   */
  getTrafficIncidentViewport(
    format: TextFormat,
    boundingbox: string,
    boundingzoom: number,
    overviewbox: string,
    overviewzoom: number,
    options?: TrafficGetTrafficIncidentViewportOptionalParams
  ): Promise<TrafficGetTrafficIncidentViewportResponse> {
    return this.client.sendOperationRequest(
      { format, boundingbox, boundingzoom, overviewbox, overviewzoom, options },
      getTrafficIncidentViewportOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getTrafficFlowTileOperationSpec: coreClient.OperationSpec = {
  path: "/traffic/flow/tile/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.TrafficGetTrafficFlowTileHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.style,
    Parameters.zoom,
    Parameters.xTileIndex,
    Parameters.yTileIndex,
    Parameters.thickness
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const getTrafficFlowSegmentOperationSpec: coreClient.OperationSpec = {
  path: "/traffic/flow/segment/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrafficFlowSegmentResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.zoom,
    Parameters.thickness,
    Parameters.style1,
    Parameters.query,
    Parameters.unit,
    Parameters.openLr
  ],
  urlParameters: [Parameters.geography, Parameters.format1],
  headerParameters: [Parameters.xMsClientId, Parameters.accept1],
  serializer
};
const getTrafficIncidentTileOperationSpec: coreClient.OperationSpec = {
  path: "/traffic/incident/tile/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.TrafficGetTrafficIncidentTileHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.zoom,
    Parameters.xTileIndex,
    Parameters.yTileIndex,
    Parameters.style2,
    Parameters.trafficState
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const getTrafficIncidentDetailOperationSpec: coreClient.OperationSpec = {
  path: "/traffic/incident/detail/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrafficIncidentDetailResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.style3,
    Parameters.boundingbox,
    Parameters.boundingZoom,
    Parameters.trafficmodelid,
    Parameters.language,
    Parameters.projection,
    Parameters.geometries,
    Parameters.expandCluster,
    Parameters.originalPosition
  ],
  urlParameters: [Parameters.geography, Parameters.format1],
  headerParameters: [Parameters.xMsClientId, Parameters.accept1],
  serializer
};
const getTrafficIncidentViewportOperationSpec: coreClient.OperationSpec = {
  path: "/traffic/incident/viewport/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrafficIncidentViewportResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.boundingbox,
    Parameters.boundingzoom,
    Parameters.overviewbox,
    Parameters.overviewzoom,
    Parameters.copyright
  ],
  urlParameters: [Parameters.geography, Parameters.format1],
  headerParameters: [Parameters.xMsClientId, Parameters.accept1],
  serializer
};
