/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue:
      "application/json, image/jpeg, image/png, image/pbf, application/vnd.mapbox-vector-tile",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const geography: OperationURLParameter = {
  parameterPath: "geography",
  mapper: {
    serializedName: "geography",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const xMsClientId: OperationParameter = {
  parameterPath: "xMsClientId",
  mapper: {
    serializedName: "x-ms-client-id",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const format: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const style: OperationQueryParameter = {
  parameterPath: "style",
  mapper: {
    serializedName: "style",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const zoom: OperationQueryParameter = {
  parameterPath: "zoom",
  mapper: {
    serializedName: "zoom",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const xTileIndex: OperationQueryParameter = {
  parameterPath: "xTileIndex",
  mapper: {
    serializedName: "x",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const yTileIndex: OperationQueryParameter = {
  parameterPath: "yTileIndex",
  mapper: {
    serializedName: "y",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const thickness: OperationQueryParameter = {
  parameterPath: ["options", "thickness"],
  mapper: {
    constraints: {
      InclusiveMaximum: 20,
      InclusiveMinimum: 1
    },
    serializedName: "thickness",
    type: {
      name: "Number"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const format1: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const style1: OperationQueryParameter = {
  parameterPath: "style",
  mapper: {
    serializedName: "style",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const query: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const unit: OperationQueryParameter = {
  parameterPath: ["options", "unit"],
  mapper: {
    serializedName: "unit",
    type: {
      name: "String"
    }
  }
};

export const openLr: OperationQueryParameter = {
  parameterPath: ["options", "openLr"],
  mapper: {
    serializedName: "openLr",
    type: {
      name: "Boolean"
    }
  }
};

export const style2: OperationQueryParameter = {
  parameterPath: "style",
  mapper: {
    serializedName: "style",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const trafficState: OperationQueryParameter = {
  parameterPath: ["options", "trafficState"],
  mapper: {
    serializedName: "t",
    type: {
      name: "String"
    }
  }
};

export const style3: OperationQueryParameter = {
  parameterPath: "style",
  mapper: {
    serializedName: "style",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const boundingbox: OperationQueryParameter = {
  parameterPath: "boundingbox",
  mapper: {
    serializedName: "boundingbox",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const boundingZoom: OperationQueryParameter = {
  parameterPath: "boundingZoom",
  mapper: {
    constraints: {
      InclusiveMaximum: 22,
      InclusiveMinimum: 0
    },
    serializedName: "boundingZoom",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const trafficmodelid: OperationQueryParameter = {
  parameterPath: "trafficmodelid",
  mapper: {
    serializedName: "trafficmodelid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const language: OperationQueryParameter = {
  parameterPath: ["options", "language"],
  mapper: {
    serializedName: "language",
    type: {
      name: "String"
    }
  }
};

export const projection: OperationQueryParameter = {
  parameterPath: ["options", "projection"],
  mapper: {
    serializedName: "projection",
    type: {
      name: "String"
    }
  }
};

export const geometries: OperationQueryParameter = {
  parameterPath: ["options", "geometries"],
  mapper: {
    serializedName: "geometries",
    type: {
      name: "String"
    }
  }
};

export const expandCluster: OperationQueryParameter = {
  parameterPath: ["options", "expandCluster"],
  mapper: {
    serializedName: "expandCluster",
    type: {
      name: "Boolean"
    }
  }
};

export const originalPosition: OperationQueryParameter = {
  parameterPath: ["options", "originalPosition"],
  mapper: {
    serializedName: "originalPosition",
    type: {
      name: "Boolean"
    }
  }
};

export const boundingzoom: OperationQueryParameter = {
  parameterPath: "boundingzoom",
  mapper: {
    constraints: {
      InclusiveMaximum: 22,
      InclusiveMinimum: 0
    },
    serializedName: "boundingzoom",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const overviewbox: OperationQueryParameter = {
  parameterPath: "overviewbox",
  mapper: {
    serializedName: "overviewbox",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const overviewzoom: OperationQueryParameter = {
  parameterPath: "overviewzoom",
  mapper: {
    constraints: {
      InclusiveMaximum: 22,
      InclusiveMinimum: 0
    },
    serializedName: "overviewzoom",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const copyright: OperationQueryParameter = {
  parameterPath: ["options", "copyright"],
  mapper: {
    defaultValue: true,
    serializedName: "copyright",
    type: {
      name: "Boolean"
    }
  }
};
