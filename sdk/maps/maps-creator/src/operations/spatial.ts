/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Spatial } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CreatorClientContext } from "../creatorClientContext";
import {
  ResponseFormat,
  SpatialGetGeofenceOptionalParams,
  SpatialGetGeofenceResponse,
  SpatialPostGeofenceOptionalParams,
  SpatialPostGeofenceResponse,
  BufferRequestBody,
  SpatialPostBufferOptionalParams,
  SpatialPostBufferResponse,
  SpatialGetBufferOptionalParams,
  SpatialGetBufferResponse,
  SpatialPostClosestPointOptionalParams,
  SpatialPostClosestPointResponse,
  SpatialGetClosestPointOptionalParams,
  SpatialGetClosestPointResponse,
  SpatialPostPointInPolygonOptionalParams,
  SpatialPostPointInPolygonResponse,
  SpatialGetPointInPolygonOptionalParams,
  SpatialGetPointInPolygonResponse,
  SpatialGetGreatCircleDistanceOptionalParams,
  SpatialGetGreatCircleDistanceResponse
} from "../models";

/** Class representing a Spatial. */
export class SpatialImpl implements Spatial {
  private readonly client: CreatorClientContext;

  /**
   * Initialize a new instance of the class Spatial class.
   * @param client Reference to the service client
   */
  constructor(client: CreatorClientContext) {
    this.client = client;
  }

  /**
   * **Search Geofence Get API**
   *
   * **Applies to:** S1 Pricing tier.
   *
   * The Geofence Get API allows you to retrieve the proximity of a coordinate to a
   * geofence that has been uploaded to the Data service. You can use the
   * [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) to upload
   * a geofence or set of fences. See [Geofencing GeoJSON
   * data](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson)
   * for more details on the geofence data format. To query the proximity of a coordinate, you supply the
   * location of the object you are tracking as well
   * as the ID for the fence or set of fences, and the response will contain information about
   * the distance from the outer edge of the geofence. A negative value signifies that the
   * coordinate is inside of the fence while a positive value means that it is outside of the
   * fence.<br><br>This API can be used for a variety of scenarios that include things like asset
   * tracking, fleet management, or setting up alerts for moving objects.
   *
   * The API supports [integration with Event
   * Grid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration). The isAsync
   * parameter is used to enable integration with Event Grid (disabled by default).
   * To test this API, you can upload the sample data from Post Geofence API examples(Request Body) via
   * Data Upload API and replace the [udid] from the sample request below with the udid returned by Data
   * Upload API.
   *
   *
   * ### Geofencing InnerError code
   *
   * In geofencing response error contract, `innererror` is  an object containing service specific
   * information about the error. `code` is a property in `innererror` which can map to a specific
   * geofencing error type. The table belows shows the code mapping between all the known client error
   * type to the corresponding geofencing error `message`.
   *
   * innererror.code | error.message
   * ---------------------------- | --------------------------------------
   * NullDeviceId  | Device Id should not be null.
   * NullUdid	  | Udid should not be null.
   * UdidWrongFormat| Udid should be acquired from user data ingestion API.
   * InvalidUserTime| Usertime is invalid.
   * InvalidSearchBuffer| Searchbuffer is invalid.
   * InvalidSearchRange| The value range of searchbuffer should be from 0 to 500 meters.
   * InvalidLatLon| Lat and/or lon parameters are invalid.
   * InvalidIsAsyncValue| The IsAsync parameter is invalid.
   * InvalidModeValue| The mode parameter invalid.
   * InvalidJson| Geofencing data is not a valid json file.
   * NotSupportedGeoJson| Geofencing data can't be read as a Feature or FeatureCollections.
   * InvalidGeoJson| Geofencing data is invalid.
   * NoUserDataWithAccountOrSubscription| Can't find user geofencing data with provided account-id and/or
   * subscription-id.
   * NoUserDataWithUdid|	Can't find user geofencing data with provided udid.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param deviceId ID of the device
   * @param udid The unique id returned from [Data Upload
   *             API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid
   *             GeoJSON FeatureCollection object. Please refer to [RFC
   *             7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's  properties
   *             should contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param options The options parameters.
   */
  getGeofence(
    format: ResponseFormat,
    deviceId: string,
    udid: string,
    latitude: number,
    longitude: number,
    options?: SpatialGetGeofenceOptionalParams
  ): Promise<SpatialGetGeofenceResponse> {
    return this.client.sendOperationRequest(
      { format, deviceId, udid, latitude, longitude, options },
      getGeofenceOperationSpec
    );
  }

  /**
   * **Search Geofence Post API**
   * **Applies to:** S1 Pricing tier.
   * The Geofence Post API allows you to retrieve the proximity of a coordinate to a  provided geofence
   * or set of fences. With POST call, you do not have to upload the fence data in advance, instead you
   * supply the location of the object you are tracking in query parameters as well as the fence or set
   * of fences data in post request body. See [Geofencing GeoJSON
   * data](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson) for more details on the
   * geofence data format. The response will contain information about the distance from the outer edge
   * of the geofence. A negative value signifies that the  coordinate is inside of the fence while a
   * positive value means that it is outside of the fence.<br><br>This API can be used for a variety of
   * scenarios that include things like asset  tracking, fleet management, or setting up alerts for
   * moving objects.
   *
   * The API supports [integration with Event
   * Grid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration).  The isAsync
   * parameter is used to enable integration with Event Grid (disabled by default).
   * @param format Desired format of the response. Only `json` format is supported.
   * @param deviceId ID of the device
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param searchGeofenceRequestBody The geofencing GeoJSON data.
   * @param options The options parameters.
   */
  postGeofence(
    format: ResponseFormat,
    deviceId: string,
    latitude: number,
    longitude: number,
    searchGeofenceRequestBody: Record<string, unknown>,
    options?: SpatialPostGeofenceOptionalParams
  ): Promise<SpatialPostGeofenceResponse> {
    return this.client.sendOperationRequest(
      {
        format,
        deviceId,
        latitude,
        longitude,
        searchGeofenceRequestBody,
        options
      },
      postGeofenceOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns a FeatureCollection where each Feature is a buffer around the corresponding indexed
   * Feature of the input. The buffer could be either on the outside or the inside of the provided
   * Feature, depending on the distance provided in the input. There must be either one distance provided
   * per Feature in the FeatureCollection  input, or if only one distance is provided, then that distance
   * is applied to every Feature in the collection. The positive (or negative) buffer of a geometry is
   * defined as the Minkowski sum (or difference) of the geometry with a circle of radius equal to the
   * absolute value of the buffer distance. The buffer API always returns a polygonal result. The
   * negative or zero-distance buffer of lines and points is always an empty polygon. The input may
   * contain a collection of Point, MultiPoint, Polygon, MultiPolygon, LineString and MultiLineString.
   * GeometryCollection will be ignored if provided.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param bufferRequestBody The FeatureCollection and the list of distances (one per feature or one for
   *                          all features).
   * @param options The options parameters.
   */
  postBuffer(
    format: ResponseFormat,
    bufferRequestBody: BufferRequestBody,
    options?: SpatialPostBufferOptionalParams
  ): Promise<SpatialPostBufferResponse> {
    return this.client.sendOperationRequest(
      { format, bufferRequestBody, options },
      postBufferOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns a FeatureCollection where each Feature is a buffer around the corresponding indexed
   * Feature of the input. The buffer could be either on the outside or the inside of the provided
   * Feature, depending on the distance provided in the input. There must be either one distance provided
   * per Feature in the FeatureCollection  input, or if only one distance is provided, then that distance
   * is applied to every Feature in the collection. The positive (or negative) buffer of a geometry is
   * defined as the Minkowski sum (or difference) of the geometry with a circle of radius equal to the
   * absolute value of the buffer distance. The buffer API always returns a polygonal result. The
   * negative or zero-distance buffer of lines and points is always an empty polygon. The input features
   * are provided by a GeoJSON file which is uploaded via [Data Upload
   * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and referenced by a unique
   * udid. The GeoJSON file may contain a collection of Point, MultiPoint, Polygon, MultiPolygon,
   * LineString and MultiLineString. GeometryCollection will be ignored if provided.
   *
   * To test this API, you can upload the sample data from [Post Buffer
   * API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postbuffer#examples) examples(Request
   * Body without distances array) via [Data Upload
   * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and replace the [udid] from
   * the [sample request
   * below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getbuffer#examples) with the udid
   * returned by Data Upload API.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param udid The unique id returned from [Data Upload
   *             API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid
   *             GeoJSON FeatureCollection object.  Please refer to [RFC
   *             7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's properties
   *             should contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * @param distances The list of distances (one per feature or one for all features), delimited by
   *                  semicolons. For example, 12.34;-56.78. Positive distance will generate a buffer outside of the
   *                  feature, whereas negative distance will generate a buffer inside of the feature. If the negative
   *                  distance larger than the geometry itself, an empty polygon will be returned.
   * @param options The options parameters.
   */
  getBuffer(
    format: ResponseFormat,
    udid: string,
    distances: string,
    options?: SpatialGetBufferOptionalParams
  ): Promise<SpatialGetBufferResponse> {
    return this.client.sendOperationRequest(
      { format, udid, distances, options },
      getBufferOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns the closest point between a base point and a given set of target points. The set of
   * target points is provided by user data in post request body. The user data may only contain a
   * collection of Point geometry. MultiPoint or other geometries will be ignored if provided. The
   * algorithm does not take into account routing or traffic. The maximum number of points accepted is
   * 100,000. Information returned includes closest point latitude, longitude, and distance in meters
   * from the closest point.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param closestPointRequestBody The FeatureCollection of Point geometries from which closest point to
   *                                source point should be determined. All the feature's properties should contain `geometryId`, which
   *                                is used for identifying the geometry and is case-sensitive.
   * @param options The options parameters.
   */
  postClosestPoint(
    format: ResponseFormat,
    latitude: number,
    longitude: number,
    closestPointRequestBody: Record<string, unknown>,
    options?: SpatialPostClosestPointOptionalParams
  ): Promise<SpatialPostClosestPointResponse> {
    return this.client.sendOperationRequest(
      { format, latitude, longitude, closestPointRequestBody, options },
      postClosestPointOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns the closest point between a base point and a given set of points in the user
   * uploaded data set identified by udid. The set of target points is provided by a GeoJSON file which
   * is uploaded via [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
   * and referenced by a unique udid. The GeoJSON file may only contain a collection of Point geometry.
   * MultiPoint or other geometries will be ignored if provided. The maximum number of points accepted is
   * 100,000. The algorithm does not take into account routing or traffic. Information returned includes
   * closest point latitude, longitude, and distance in meters from the closest point.
   *
   * To test this API, you can upload the sample data from [Post Closest Point
   * API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postclosestpoint#examples)
   * examples(Request Body) via [Data Upload
   * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and replace the [udid] from
   * the [sample request
   * below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getclosestpoint#examples) with the
   * udid returned by Data Upload API.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param udid The unique id returned from [Data Upload
   *             API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid
   *             GeoJSON FeatureCollection object.  Please refer to [RFC
   *             7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's properties
   *             should contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param options The options parameters.
   */
  getClosestPoint(
    format: ResponseFormat,
    udid: string,
    latitude: number,
    longitude: number,
    options?: SpatialGetClosestPointOptionalParams
  ): Promise<SpatialGetClosestPointResponse> {
    return this.client.sendOperationRequest(
      { format, udid, latitude, longitude, options },
      getClosestPointOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns a boolean value indicating whether a point is inside a set of polygons. The user
   * data may contain Polygon and MultiPolygon geometries, other geometries will be ignored if provided.
   * If the point is inside or on the boundary of one of these polygons, the value returned is true. In
   * all other cases, the value returned is false. When the point is inside multiple polygons, the result
   * will give intersecting geometries section to show all valid geometries (referenced by geometryId) in
   * user data. The maximum number of vertices accepted to form a Polygon is 10,000.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param pointInPolygonRequestBody A FeatureCollection with a set of Polygon/MultiPolygon geometries.
   *                                  The maximum number of vertices accepted to form a Polygon is 10,000. All the feature's properties
   *                                  should contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * @param options The options parameters.
   */
  postPointInPolygon(
    format: ResponseFormat,
    latitude: number,
    longitude: number,
    pointInPolygonRequestBody: Record<string, unknown>,
    options?: SpatialPostPointInPolygonOptionalParams
  ): Promise<SpatialPostPointInPolygonResponse> {
    return this.client.sendOperationRequest(
      { format, latitude, longitude, pointInPolygonRequestBody, options },
      postPointInPolygonOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API returns a boolean value indicating whether a point is inside a set of polygons. The set of
   * polygons is provided by a GeoJSON file which is uploaded via [Data Upload
   * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and referenced by a unique
   * udid. The GeoJSON file may contain Polygon and MultiPolygon geometries, other geometries will be
   * ignored if provided. If the point is inside or on the boundary of one of these polygons, the value
   * returned is true. In all other cases, the value returned is false. When the point is inside multiple
   * polygons, the result will give intersecting geometries section to show all valid
   * geometries(referenced by geometryId) in user data. The maximum number of vertices accepted to form a
   * Polygon is 10,000.
   *
   *
   * To test this API, you can upload the sample data from [Post Point In Polygon
   * API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postpointinpolygon#examples)
   * examples(Request Body) via [Data Upload
   * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and replace the [udid] from
   * the [sample request
   * below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getpointinpolygon#examples) with the
   * udid returned by Data Upload API.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param udid The unique id returned from [Data Upload
   *             API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid
   *             GeoJSON FeatureCollection object.  Please refer to [RFC
   *             7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's properties
   *             should contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * @param latitude The latitude of the location being passed.  Example: 48.36.
   * @param longitude The longitude of the location being passed.  Example: -124.63.
   * @param options The options parameters.
   */
  getPointInPolygon(
    format: ResponseFormat,
    udid: string,
    latitude: number,
    longitude: number,
    options?: SpatialGetPointInPolygonOptionalParams
  ): Promise<SpatialGetPointInPolygonResponse> {
    return this.client.sendOperationRequest(
      { format, udid, latitude, longitude, options },
      getPointInPolygonOperationSpec
    );
  }

  /**
   * **Applies to**: S1 pricing tier.
   *
   * This API will return the great-circle or shortest distance between two points on the surface of a
   * sphere, measured along the surface of the sphere.  This differs from calculating a straight line
   * through the sphere's interior. This method is helpful for estimating travel distances for airplanes
   * by calculating the shortest distance between airports.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param query The Coordinates through which the distance is calculated, delimited by a colon. Two
   *              coordinates are required.  The first one is the source point coordinate and the last is the target
   *              point coordinate. For example, 47.622942,122.316456:57.673988,127.121513
   * @param options The options parameters.
   */
  getGreatCircleDistance(
    format: ResponseFormat,
    query: string,
    options?: SpatialGetGreatCircleDistanceOptionalParams
  ): Promise<SpatialGetGreatCircleDistanceResponse> {
    return this.client.sendOperationRequest(
      { format, query, options },
      getGreatCircleDistanceOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getGeofenceOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/geofence/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GeofenceResponse,
      headersMapper: Mappers.SpatialGetGeofenceHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.udid,
    Parameters.apiVersion1,
    Parameters.deviceId,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.z,
    Parameters.userTime,
    Parameters.searchBuffer,
    Parameters.isAsync,
    Parameters.mode
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const postGeofenceOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/geofence/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GeofenceResponse,
      headersMapper: Mappers.SpatialPostGeofenceHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.searchGeofenceRequestBody,
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.deviceId,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.z,
    Parameters.userTime,
    Parameters.searchBuffer,
    Parameters.isAsync,
    Parameters.mode
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.xMsClientId,
    Parameters.contentType2
  ],
  mediaType: "json",
  serializer
};
const postBufferOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/buffer/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BufferResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bufferRequestBody,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.xMsClientId,
    Parameters.contentType2
  ],
  mediaType: "json",
  serializer
};
const getBufferOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/buffer/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BufferResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.udid,
    Parameters.apiVersion1,
    Parameters.distances
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const postClosestPointOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/closestPoint/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ClosestPointResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.closestPointRequestBody,
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.numberOfClosestPoints
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.xMsClientId,
    Parameters.contentType2
  ],
  mediaType: "json",
  serializer
};
const getClosestPointOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/closestPoint/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClosestPointResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.udid,
    Parameters.apiVersion1,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.numberOfClosestPoints
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const postPointInPolygonOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/pointInPolygon/{format}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PointInPolygonResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.pointInPolygonRequestBody,
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.latitude,
    Parameters.longitude
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [
    Parameters.accept,
    Parameters.xMsClientId,
    Parameters.contentType2
  ],
  mediaType: "json",
  serializer
};
const getPointInPolygonOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/pointInPolygon/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PointInPolygonResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.udid,
    Parameters.apiVersion1,
    Parameters.latitude,
    Parameters.longitude
  ],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const getGreatCircleDistanceOperationSpec: coreClient.OperationSpec = {
  path: "/spatial/greatCircleDistance/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GreatCircleDistanceResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1, Parameters.query],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
