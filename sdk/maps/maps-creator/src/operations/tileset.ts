/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Tileset } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CreatorClientContext } from "../creatorClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  TilesetDetailInfo,
  TilesetListNextOptionalParams,
  TilesetListOptionalParams,
  TilesetCreateOptionalParams,
  TilesetCreateResponse,
  TilesetListOperationResponse,
  TilesetGetOptionalParams,
  TilesetGetResponse,
  TilesetDeleteOptionalParams,
  TilesetGetOperationOptionalParams,
  TilesetGetOperationResponse,
  TilesetListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a Tileset. */
export class TilesetImpl implements Tileset {
  private readonly client: CreatorClientContext;

  /**
   * Initialize a new instance of the class Tileset class.
   * @param client Reference to the service client
   */
  constructor(client: CreatorClientContext) {
    this.client = client;
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   * This API allows the caller to fetch a list of all tilesets created.
   * <br>
   * @param options The options parameters.
   */
  public list(
    options?: TilesetListOptionalParams
  ): PagedAsyncIterableIterator<TilesetDetailInfo> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: TilesetListOptionalParams
  ): AsyncIterableIterator<TilesetDetailInfo[]> {
    let result = await this._list(options);
    yield result.tilesets || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.tilesets || [];
    }
  }

  private async *listPagingAll(
    options?: TilesetListOptionalParams
  ): AsyncIterableIterator<TilesetDetailInfo> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   *  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces
   * concepts and tools that apply to Azure Maps Creator.
   *
   * The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a
   * set of tiles that can be consumed
   * from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a
   * dataset, use the
   * [DataSet Create API](/rest/api/maps/dataset/createpreview).
   *
   * ## Submit Create Request
   *
   * To create your tileset you will make a `POST` request with an empty body. The `datasetId` query
   * parameter will be
   * used as the source of the tileset data.
   *
   * The Create Tileset API is a
   * [long-running request](https://aka.ms/am-creator-lrt-v2).
   * @param datasetId The unique `datasetId` that the tileset create API uses to retrieve features to
   *                  generate tiles. The `datasetId` must have been obtained from a successful [Dataset Create
   *                  API](/en-us/rest/api/maps/dataset/createpreview) call.
   * @param options The options parameters.
   */
  async beginCreate(
    datasetId: string,
    options?: TilesetCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<TilesetCreateResponse>, TilesetCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<TilesetCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return { flatResponse, rawResponse: currentRawResponse! };
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      { datasetId, options },
      createOperationSpec,
      sendOperation,
      "location"
    );
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   *  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces
   * concepts and tools that apply to Azure Maps Creator.
   *
   * The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a
   * set of tiles that can be consumed
   * from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a
   * dataset, use the
   * [DataSet Create API](/rest/api/maps/dataset/createpreview).
   *
   * ## Submit Create Request
   *
   * To create your tileset you will make a `POST` request with an empty body. The `datasetId` query
   * parameter will be
   * used as the source of the tileset data.
   *
   * The Create Tileset API is a
   * [long-running request](https://aka.ms/am-creator-lrt-v2).
   * @param datasetId The unique `datasetId` that the tileset create API uses to retrieve features to
   *                  generate tiles. The `datasetId` must have been obtained from a successful [Dataset Create
   *                  API](/en-us/rest/api/maps/dataset/createpreview) call.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    datasetId: string,
    options?: TilesetCreateOptionalParams
  ): Promise<TilesetCreateResponse> {
    const poller = await this.beginCreate(datasetId, options);
    return poller.pollUntilDone();
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   * This API allows the caller to fetch a list of all tilesets created.
   * <br>
   * @param options The options parameters.
   */
  private _list(
    options?: TilesetListOptionalParams
  ): Promise<TilesetListOperationResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   * This API allows the caller to fetch a tileset.
   * @param tilesetId The Tileset Id
   * @param options The options parameters.
   */
  get(
    tilesetId: string,
    options?: TilesetGetOptionalParams
  ): Promise<TilesetGetResponse> {
    return this.client.sendOperationRequest(
      { tilesetId, options },
      getOperationSpec
    );
  }

  /**
   * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
   *
   * Creator makes it possible to develop applications based on your private indoor map data using Azure
   * Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article
   * introduces concepts and tools that apply to Azure Maps Creator.
   *
   * This API allows the caller to delete a created tileset.<br>
   * You can use this API if a tileset is no longer needed.
   *
   * ### Submit Delete Request
   *
   * To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId`
   * of the tileset to delete.<br>
   *
   * #### Delete request "Successful"
   *
   * The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset
   * was deleted successfully.<br>
   *
   * #### Delete request "Failed"
   *
   * A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in
   * `tilesetId` is not found.
   *
   * Here is a sample error response:
   *
   * <br>
   *
   * ```json
   * {
   *   "error": {
   *       "code": "400 BadRequest",
   *       "message": "Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist."
   *   }
   * }
   * ```
   * @param tilesetId The Tileset Id
   * @param options The options parameters.
   */
  delete(
    tilesetId: string,
    options?: TilesetDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { tilesetId, options },
      deleteOperationSpec
    );
  }

  /**
   * This path will be obtained from a call to /tilesets/create.  While in progress, an http200 will be
   * returned with no extra headers -  followed by an http200 with Resource-Location header once
   * successfully completed.
   * @param operationId The ID to query the status for the dataset create/import request.
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: TilesetGetOperationOptionalParams
  ): Promise<TilesetGetOperationResponse> {
    return this.client.sendOperationRequest(
      { operationId, options },
      getOperationOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: TilesetListNextOptionalParams
  ): Promise<TilesetListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/tilesets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LongRunningOperationResult,
      headersMapper: Mappers.TilesetCreateHeaders
    },
    201: {
      bodyMapper: Mappers.LongRunningOperationResult,
      headersMapper: Mappers.TilesetCreateHeaders
    },
    202: {
      bodyMapper: Mappers.LongRunningOperationResult,
      headersMapper: Mappers.TilesetCreateHeaders
    },
    204: {
      bodyMapper: Mappers.LongRunningOperationResult,
      headersMapper: Mappers.TilesetCreateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.description,
    Parameters.datasetId2
  ],
  urlParameters: [Parameters.geography],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/tilesets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TilesetListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.geography],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/tilesets/{tilesetId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TilesetDetailInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.geography, Parameters.tilesetId],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/tilesets/{tilesetId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.geography, Parameters.tilesetId],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
const getOperationOperationSpec: coreClient.OperationSpec = {
  path: "/tilesets/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongRunningOperationResult,
      headersMapper: Mappers.TilesetGetOperationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.geography, Parameters.operationId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TilesetListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.geography, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
