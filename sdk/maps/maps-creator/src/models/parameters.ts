/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  StylesObject as StylesObjectMapper,
  FeatureStatesStructure as FeatureStatesStructureMapper,
  BufferRequestBody as BufferRequestBodyMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const geography: OperationURLParameter = {
  parameterPath: "geography",
  mapper: {
    serializedName: "geography",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const creatorDataItemId: OperationQueryParameter = {
  parameterPath: ["options", "creatorDataItemId"],
  mapper: {
    serializedName: "creatorDataItemId",
    type: {
      name: "String"
    }
  }
};

export const aliasId: OperationURLParameter = {
  parameterPath: "aliasId",
  mapper: {
    serializedName: "aliasId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const creatorDataItemId1: OperationQueryParameter = {
  parameterPath: "creatorDataItemId",
  mapper: {
    serializedName: "creatorDataItemId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: "contentType",
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const uploadContent: OperationParameter = {
  parameterPath: "uploadContent",
  mapper: {
    serializedName: "uploadContent",
    required: true,
    type: {
      name: "Stream"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: "contentType",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const uploadContent1: OperationParameter = {
  parameterPath: "uploadContent",
  mapper: {
    serializedName: "uploadContent",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const xMsClientId: OperationParameter = {
  parameterPath: "xMsClientId",
  mapper: {
    serializedName: "x-ms-client-id",
    type: {
      name: "String"
    }
  }
};

export const uploadDataDescription: OperationQueryParameter = {
  parameterPath: ["options", "uploadDataDescription"],
  mapper: {
    serializedName: "description",
    type: {
      name: "String"
    }
  }
};

export const uploadDataFormat: OperationQueryParameter = {
  parameterPath: "uploadDataFormat",
  mapper: {
    serializedName: "dataFormat",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType2: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const updateContent: OperationParameter = {
  parameterPath: "updateContent",
  mapper: {
    serializedName: "updateContent",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const uniqueDataId: OperationURLParameter = {
  parameterPath: "uniqueDataId",
  mapper: {
    serializedName: "udid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accept2: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue:
      "application/json, application/vnd.geo+json, application/octet-stream",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const conversionId: OperationQueryParameter = {
  parameterPath: "conversionId",
  mapper: {
    serializedName: "conversionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const datasetId: OperationQueryParameter = {
  parameterPath: ["options", "datasetId"],
  mapper: {
    serializedName: "datasetId",
    type: {
      name: "String"
    }
  }
};

export const descriptionDataset: OperationQueryParameter = {
  parameterPath: ["options", "descriptionDataset"],
  mapper: {
    serializedName: "description",
    type: {
      name: "String"
    }
  }
};

export const datasetId1: OperationURLParameter = {
  parameterPath: "datasetId",
  mapper: {
    serializedName: "datasetId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const udid: OperationQueryParameter = {
  parameterPath: "udid",
  mapper: {
    serializedName: "udid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const outputOntology: OperationQueryParameter = {
  parameterPath: "outputOntology",
  mapper: {
    serializedName: "outputOntology",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const description: OperationQueryParameter = {
  parameterPath: ["options", "description"],
  mapper: {
    serializedName: "description",
    type: {
      name: "String"
    }
  }
};

export const conversionId1: OperationURLParameter = {
  parameterPath: "conversionId",
  mapper: {
    serializedName: "conversionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const statesetCreateRequestBody: OperationParameter = {
  parameterPath: "statesetCreateRequestBody",
  mapper: StylesObjectMapper
};

export const datasetId2: OperationQueryParameter = {
  parameterPath: "datasetId",
  mapper: {
    serializedName: "datasetId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const statesetStyleUpdateRequestBody: OperationParameter = {
  parameterPath: "statesetStyleUpdateRequestBody",
  mapper: StylesObjectMapper
};

export const statesetId: OperationURLParameter = {
  parameterPath: "statesetId",
  mapper: {
    serializedName: "statesetId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const featureStateUpdateRequestBody: OperationParameter = {
  parameterPath: "featureStateUpdateRequestBody",
  mapper: FeatureStatesStructureMapper
};

export const featureId: OperationURLParameter = {
  parameterPath: "featureId",
  mapper: {
    serializedName: "featureId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const stateKeyName: OperationQueryParameter = {
  parameterPath: "stateKeyName",
  mapper: {
    serializedName: "stateKeyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const format: OperationURLParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const deviceId: OperationQueryParameter = {
  parameterPath: "deviceId",
  mapper: {
    serializedName: "deviceId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const latitude: OperationQueryParameter = {
  parameterPath: "latitude",
  mapper: {
    serializedName: "lat",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const longitude: OperationQueryParameter = {
  parameterPath: "longitude",
  mapper: {
    serializedName: "lon",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const z: OperationQueryParameter = {
  parameterPath: ["options", "z"],
  mapper: {
    serializedName: "z",
    type: {
      name: "Number"
    }
  }
};

export const userTime: OperationQueryParameter = {
  parameterPath: ["options", "userTime"],
  mapper: {
    serializedName: "userTime",
    type: {
      name: "DateTime"
    }
  }
};

export const searchBuffer: OperationQueryParameter = {
  parameterPath: ["options", "searchBuffer"],
  mapper: {
    constraints: {
      InclusiveMaximum: 500,
      InclusiveMinimum: 0
    },
    serializedName: "searchBuffer",
    type: {
      name: "Number"
    }
  }
};

export const isAsync: OperationQueryParameter = {
  parameterPath: ["options", "isAsync"],
  mapper: {
    serializedName: "isAsync",
    type: {
      name: "Boolean"
    }
  }
};

export const mode: OperationQueryParameter = {
  parameterPath: ["options", "mode"],
  mapper: {
    serializedName: "mode",
    type: {
      name: "String"
    }
  }
};

export const searchGeofenceRequestBody: OperationParameter = {
  parameterPath: "searchGeofenceRequestBody",
  mapper: {
    serializedName: "searchGeofenceRequestBody",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const bufferRequestBody: OperationParameter = {
  parameterPath: "bufferRequestBody",
  mapper: BufferRequestBodyMapper
};

export const distances: OperationQueryParameter = {
  parameterPath: "distances",
  mapper: {
    serializedName: "distances",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const closestPointRequestBody: OperationParameter = {
  parameterPath: "closestPointRequestBody",
  mapper: {
    serializedName: "closestPointRequestBody",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const numberOfClosestPoints: OperationQueryParameter = {
  parameterPath: ["options", "numberOfClosestPoints"],
  mapper: {
    serializedName: "numberOfClosestPoints",
    type: {
      name: "Number"
    }
  }
};

export const pointInPolygonRequestBody: OperationParameter = {
  parameterPath: "pointInPolygonRequestBody",
  mapper: {
    serializedName: "pointInPolygonRequestBody",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const query: OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tilesetId: OperationURLParameter = {
  parameterPath: "tilesetId",
  mapper: {
    serializedName: "tilesetId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectionId: OperationURLParameter = {
  parameterPath: "collectionId",
  mapper: {
    serializedName: "collectionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const limit: OperationQueryParameter = {
  parameterPath: ["options", "limit"],
  mapper: {
    constraints: {
      InclusiveMaximum: 50,
      InclusiveMinimum: 1
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};

export const bbox: OperationQueryParameter = {
  parameterPath: ["options", "bbox"],
  mapper: {
    serializedName: "bbox",
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "filter",
    type: {
      name: "String"
    }
  }
};
