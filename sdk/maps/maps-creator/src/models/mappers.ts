/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AliasesCreateResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasesCreateResponse",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasId: {
        serializedName: "aliasId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creatorDataItemId: {
        serializedName: "creatorDataItemId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AliasListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasListResponse",
    modelProperties: {
      aliases: {
        serializedName: "aliases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AliasListItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AliasListItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasListItem",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasId: {
        serializedName: "aliasId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creatorDataItemId: {
        serializedName: "creatorDataItemId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongRunningOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongRunningOperationResult",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      warning: {
        serializedName: "warning",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const MapDataListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MapDataListResponse",
    modelProperties: {
      mapDataList: {
        serializedName: "mapDataList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MapDataDetailInfo"
            }
          }
        }
      }
    }
  }
};

export const MapDataDetailInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MapDataDetailInfo",
    modelProperties: {
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sizeInBytes: {
        serializedName: "sizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      uploadStatus: {
        serializedName: "uploadStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "dataFormat",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetListResponse",
    modelProperties: {
      datasets: {
        serializedName: "datasets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatasetDetailInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetDetailInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetDetailInfo",
    modelProperties: {
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetId: {
        serializedName: "datasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetSources: {
        serializedName: "datasetSources",
        type: {
          name: "Composite",
          className: "DatasetSources"
        }
      },
      featureCounts: {
        serializedName: "featureCounts",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DatasetSources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetSources",
    modelProperties: {
      conversionIds: {
        serializedName: "conversionIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appendDatasetId: {
        serializedName: "appendDatasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionListResponse",
    modelProperties: {
      conversions: {
        serializedName: "conversions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversionListDetailInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionListDetailInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionListDetailInfo",
    modelProperties: {
      conversionId: {
        serializedName: "conversionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      featureCounts: {
        serializedName: "featureCounts",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const StylesObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StylesObject",
    modelProperties: {
      styles: {
        serializedName: "styles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StyleObject"
            }
          }
        }
      }
    }
  }
};

export const StyleObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StyleObject",
    uberParent: "StyleObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatesetCreatedResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetCreatedResponse",
    modelProperties: {
      statesetId: {
        serializedName: "statesetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatesetListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetListResponse",
    modelProperties: {
      statesets: {
        serializedName: "statesets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatesetInfoObject"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatesetInfoObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetInfoObject",
    modelProperties: {
      statesetId: {
        serializedName: "statesetId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetIds: {
        serializedName: "datasetIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      statesetStyle: {
        serializedName: "statesetStyle",
        type: {
          name: "Composite",
          className: "StylesObject"
        }
      }
    }
  }
};

export const StatesetGetResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetGetResponse",
    modelProperties: {
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetIds: {
        serializedName: "datasetIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      statesetStyle: {
        serializedName: "statesetStyle",
        type: {
          name: "Composite",
          className: "StylesObject"
        }
      }
    }
  }
};

export const FeatureStatesStructure: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureStatesStructure",
    modelProperties: {
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FeatureStateObject"
            }
          }
        }
      }
    }
  }
};

export const FeatureStateObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureStateObject",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeofenceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeofenceResponse",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeofenceGeometry"
            }
          }
        }
      },
      expiredGeofenceGeometryId: {
        serializedName: "expiredGeofenceGeometryId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      invalidPeriodGeofenceGeometryId: {
        serializedName: "invalidPeriodGeofenceGeometryId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isEventPublished: {
        serializedName: "isEventPublished",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const GeofenceGeometry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeofenceGeometry",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      udId: {
        serializedName: "udId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geometryId: {
        serializedName: "geometryId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      distance: {
        serializedName: "distance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestLat: {
        serializedName: "nearestLat",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestLon: {
        serializedName: "nearestLon",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestZ: {
        serializedName: "nearestZ",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BufferRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferRequestBody",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      distances: {
        serializedName: "distances",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const BufferResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "BufferResponseSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "GeoJsonFeatureCollection"
        }
      }
    }
  }
};

export const BufferResponseSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferResponseSummary",
    modelProperties: {
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonObject",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonFeatureCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollectionData",
    modelProperties: {
      features: {
        serializedName: "features",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonFeature"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonFeatureData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureData",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Composite",
          className: "GeoJsonGeometry"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClosestPointResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPointResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "ClosestPointSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClosestPointResultEntry"
            }
          }
        }
      }
    }
  }
};

export const ClosestPointSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPointSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "SpatialCoordinate"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialCoordinate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialCoordinate",
    modelProperties: {
      lat: {
        serializedName: "lat",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lon: {
        serializedName: "lon",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClosestPointResultEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPointResultEntry",
    modelProperties: {
      distanceInMeters: {
        serializedName: "distanceInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "SpatialCoordinate"
        }
      },
      geometryId: {
        serializedName: "geometryId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointInPolygonResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "PointInPolygonSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "PointInPolygonResult"
        }
      }
    }
  }
};

export const PointInPolygonSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "SpatialCoordinate"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointInPolygonResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonResult",
    modelProperties: {
      pointInPolygons: {
        serializedName: "pointInPolygons",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      intersectingGeometries: {
        serializedName: "intersectingGeometries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GreatCircleDistanceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "GreatCircleDistanceResponseSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "GreatCircleDistanceResponseResult"
        }
      }
    }
  }
};

export const GreatCircleDistanceResponseSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceResponseSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "SpatialCoordinate"
        }
      },
      targetPoint: {
        serializedName: "targetPoint",
        type: {
          name: "Composite",
          className: "SpatialCoordinate"
        }
      }
    }
  }
};

export const GreatCircleDistanceResponseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceResponseResult",
    modelProperties: {
      distanceInMeters: {
        serializedName: "distanceInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TilesetListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetListResponse",
    modelProperties: {
      tilesets: {
        serializedName: "tilesets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TilesetDetailInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TilesetDetailInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetDetailInfo",
    modelProperties: {
      tilesetId: {
        serializedName: "tilesetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetId: {
        serializedName: "datasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      minZoom: {
        serializedName: "minZoom",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxZoom: {
        serializedName: "maxZoom",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bbox: {
        serializedName: "bbox",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const LandingPageResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LandingPageResponse",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const WfsEndpointLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WfsEndpointLink",
    modelProperties: {
      href: {
        serializedName: "href",
        required: true,
        type: {
          name: "String"
        }
      },
      rel: {
        serializedName: "rel",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      hreflang: {
        serializedName: "hreflang",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConformanceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConformanceResponse",
    modelProperties: {
      conformsTo: {
        serializedName: "conformsTo",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CollectionsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionsResponse",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      },
      collections: {
        serializedName: "collections",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CollectionInfo"
            }
          }
        }
      }
    }
  }
};

export const CollectionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const CollectionDefinitionResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionDefinitionResponse",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      idPrefix: {
        serializedName: "idPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geometryType: {
        serializedName: "geometryType",
        required: true,
        type: {
          name: "String"
        }
      },
      featureTypes: {
        serializedName: "featureTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefinitionProperties"
            }
          }
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const DefinitionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefinitionProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      required: {
        serializedName: "required",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ExtendedGeoJsonFeatureCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedGeoJsonFeatureCollectionData",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberReturned: {
        serializedName: "numberReturned",
        type: {
          name: "Number"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const FeatureResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureResponse",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      feature: {
        serializedName: "feature",
        type: {
          name: "Composite",
          className: "GeoJsonFeature"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WfsEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const NumberRuleObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NumberRuleObject",
    modelProperties: {
      range: {
        serializedName: "range",
        type: {
          name: "Composite",
          className: "RangeObject"
        }
      },
      color: {
        serializedName: "color",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RangeObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangeObject",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      exclusiveMinimum: {
        serializedName: "exclusiveMinimum",
        type: {
          name: "Number"
        }
      },
      exclusiveMaximum: {
        serializedName: "exclusiveMaximum",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BooleanRuleObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BooleanRuleObject",
    modelProperties: {
      true: {
        serializedName: "true",
        type: {
          name: "String"
        }
      },
      false: {
        serializedName: "false",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Sequence",
                      element: {
                        type: {
                          name: "Number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometryCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollectionData",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonGeometry"
            }
          }
        }
      }
    }
  }
};

export const BooleanTypeStyleRule: coreClient.CompositeMapper = {
  serializedName: "boolean",
  type: {
    name: "Composite",
    className: "BooleanTypeStyleRule",
    uberParent: "StyleObject",
    polymorphicDiscriminator: StyleObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleObject.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BooleanRuleObject"
            }
          }
        }
      }
    }
  }
};

export const NumberTypeStyleRule: coreClient.CompositeMapper = {
  serializedName: "number",
  type: {
    name: "Composite",
    className: "NumberTypeStyleRule",
    uberParent: "StyleObject",
    polymorphicDiscriminator: StyleObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleObject.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NumberRuleObject"
            }
          }
        }
      }
    }
  }
};

export const StringTypeStyleRule: coreClient.CompositeMapper = {
  serializedName: "string",
  type: {
    name: "Composite",
    className: "StringTypeStyleRule",
    uberParent: "StyleObject",
    polymorphicDiscriminator: StyleObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleObject.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometry: coreClient.CompositeMapper = {
  serializedName: "GeoJsonGeometry",
  type: {
    name: "Composite",
    className: "GeoJsonGeometry",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...GeoJsonObject.type.modelProperties
    }
  }
};

export const GeoJsonFeature: coreClient.CompositeMapper = {
  serializedName: "Feature",
  type: {
    name: "Composite",
    className: "GeoJsonFeature",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureData.type.modelProperties
    }
  }
};

export const GeoJsonFeatureCollection: coreClient.CompositeMapper = {
  serializedName: "FeatureCollection",
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollection",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureCollectionData.type.modelProperties
    }
  }
};

export const ExtendedGeoJsonFeatureCollection: coreClient.CompositeMapper = {
  serializedName: "FeatureCollection",
  type: {
    name: "Composite",
    className: "ExtendedGeoJsonFeatureCollection",
    uberParent: "ExtendedGeoJsonFeatureCollectionData",
    polymorphicDiscriminator:
      ExtendedGeoJsonFeatureCollectionData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonFeatureCollection.type.modelProperties,
      ...ExtendedGeoJsonFeatureCollectionData.type.modelProperties
    }
  }
};

export const GeoJsonPoint: coreClient.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "GeoJsonPoint",
    uberParent: "GeoJsonPointData",
    polymorphicDiscriminator: GeoJsonPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPointData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPoint: coreClient.CompositeMapper = {
  serializedName: "MultiPoint",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPoint",
    uberParent: "GeoJsonMultiPointData",
    polymorphicDiscriminator:
      GeoJsonMultiPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPointData.type.modelProperties
    }
  }
};

export const GeoJsonLineString: coreClient.CompositeMapper = {
  serializedName: "LineString",
  type: {
    name: "Composite",
    className: "GeoJsonLineString",
    uberParent: "GeoJsonLineStringData",
    polymorphicDiscriminator:
      GeoJsonLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonMultiLineString: coreClient.CompositeMapper = {
  serializedName: "MultiLineString",
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineString",
    uberParent: "GeoJsonMultiLineStringData",
    polymorphicDiscriminator:
      GeoJsonMultiLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonPolygon: coreClient.CompositeMapper = {
  serializedName: "Polygon",
  type: {
    name: "Composite",
    className: "GeoJsonPolygon",
    uberParent: "GeoJsonPolygonData",
    polymorphicDiscriminator: GeoJsonPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPolygon: coreClient.CompositeMapper = {
  serializedName: "MultiPolygon",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygon",
    uberParent: "GeoJsonMultiPolygonData",
    polymorphicDiscriminator:
      GeoJsonMultiPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonGeometryCollection: coreClient.CompositeMapper = {
  serializedName: "GeometryCollection",
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollection",
    uberParent: "GeoJsonGeometryCollectionData",
    polymorphicDiscriminator:
      GeoJsonGeometryCollectionData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonGeometryCollectionData.type.modelProperties
    }
  }
};

export const AliasCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasCreateHeaders",
    modelProperties: {
      accessControlExposeHeaders: {
        serializedName: "access-control-expose-headers",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataUploadPreviewHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataUploadPreviewHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataUpdatePreviewHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataUpdatePreviewHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDownloadPreviewHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDownloadPreviewHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataGetOperationPreviewHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataGetOperationPreviewHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetCreateHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionConvertHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionConvertHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialGetGeofenceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialGetGeofenceHeaders",
    modelProperties: {
      xCorrelationId: {
        serializedName: "x-correlation-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialPostGeofenceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialPostGeofenceHeaders",
    modelProperties: {
      xCorrelationId: {
        serializedName: "x-correlation-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TilesetCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetCreateHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TilesetGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  StyleObject: StyleObject,
  GeoJsonObject: GeoJsonObject,
  "StyleObject.boolean": BooleanTypeStyleRule,
  "StyleObject.number": NumberTypeStyleRule,
  "StyleObject.string": StringTypeStyleRule,
  "GeoJsonObject.GeoJsonGeometry": GeoJsonGeometry,
  "GeoJsonObject.Feature": GeoJsonFeature,
  "GeoJsonObject.FeatureCollection": GeoJsonFeatureCollection,
  "ExtendedGeoJsonFeatureCollectionData.FeatureCollection": ExtendedGeoJsonFeatureCollection,
  "GeoJsonPointData.Point": GeoJsonPoint,
  "GeoJsonMultiPointData.MultiPoint": GeoJsonMultiPoint,
  "GeoJsonLineStringData.LineString": GeoJsonLineString,
  "GeoJsonMultiLineStringData.MultiLineString": GeoJsonMultiLineString,
  "GeoJsonPolygonData.Polygon": GeoJsonPolygon,
  "GeoJsonMultiPolygonData.MultiPolygon": GeoJsonMultiPolygon,
  "GeoJsonGeometryCollectionData.GeometryCollection": GeoJsonGeometryCollection
};
